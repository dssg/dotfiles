# Lo que sigue es del man de bash  

# Bash allows these prompt strings to be customized by inserting a
# number of backslash-escaped special characters that are
# decoded as follows:

#   \a         an ASCII bell character (07)
#   \d         the date in "Weekday Month Date" format (e.g., "Tue May 26")
#   \D{format} the format is passed to strftime(3) and the result
#              is inserted into the prompt string an empty format
#              results in a locale-specific time representation.
#              The braces are required
#   \e         an ASCII escape character (033)
#   \h         the hostname up to the first `.'
#   \H         the hostname
#   \j         the number of jobs currently managed by the shell
#   \l         the basename of the shell's terminal device name
#   \n         newline
#   \r         carriage return
#   \s         the name of the shell, the basename of $0 (the portion following
#              the final slash)
#   \t         the current time in 24-hour HH:MM:SS format
#   \T         the current time in 12-hour HH:MM:SS format
#   \@         the current time in 12-hour am/pm format
#   \A         the current time in 24-hour HH:MM format
#   \u         the username of the current user
#   \v         the version of bash (e.g., 2.00)
#   \V         the release of bash, version + patch level (e.g., 2.00.0)
#   \w         the current working directory, with $HOME abbreviated with a tilde
#   \W         the basename of the current working directory, with $HOME
#              abbreviated with a tilde
#   \!         the history number of this command
#   \#         the command number of this command
#   \$         if the effective UID is 0, a #, otherwise a $
#   \nnn       the character corresponding to the octal number nnn
#   \\         a backslash
#   \[         begin a sequence of non-printing characters, which could be used
#              to embed a terminal control sequence into the prompt
#   \]         end a sequence of non-printing characters
         
#   The command number and the history number are usually different:
#   the history number of a command is its position in the history
#   list, which may include commands restored from the history file
#   (see HISTORY below), while the command number is the position in
#   the sequence of commands executed during the current shell session.
#   After the string is decoded, it is expanded via parameter
#   expansion, command substitution, arithmetic expansion, and quote
#   removal, subject to the value of the promptvars shell option (see
#   the description of the shopt command under SHELL BUILTIN COMMANDS
#   below).

# Fin del extracto del manual de bash

# Colores de http://wiki.archlinux.org/index.php/Color_Bash_Prompt
txtblk='\e[0;30m' # Black - Regular
txtred='\e[0;31m' # Red
txtgrn='\e[0;32m' # Green
txtylw='\e[0;33m' # Yellow
txtblu='\e[0;34m' # Blue
txtpur='\e[0;35m' # Purple
txtcyn='\e[0;36m' # Cyan
txtwht='\e[0;37m' # White
bldblk='\e[1;30m' # Black - Bold
bldred='\e[1;31m' # Red
bldgrn='\e[1;32m' # Green
bldylw='\e[1;33m' # Yellow
bldblu='\e[1;34m' # Blue
bldpur='\e[1;35m' # Purple
bldcyn='\e[1;36m' # Cyan
bldwht='\e[1;37m' # White
unkblk='\e[4;30m' # Black - Underline
undred='\e[4;31m' # Red
undgrn='\e[4;32m' # Green
undylw='\e[4;33m' # Yellow
undblu='\e[4;34m' # Blue
undpur='\e[4;35m' # Purple
undcyn='\e[4;36m' # Cyan
undwht='\e[4;37m' # White
bakblk='\e[40m'   # Black - Background
bakred='\e[41m'   # Red
badgrn='\e[42m'   # Green
bakylw='\e[43m'   # Yellow
bakblu='\e[44m'   # Blue
bakpur='\e[45m'   # Purple
bakcyn='\e[46m'   # Cyan
bakwht='\e[47m'   # White
txtrst='\e[0m'    # Text Reset

PS1="\n\[$bldblu\]\u:\[$bldgrn\]\w \[$bldblk\]\$(vcprompt)\[$txtrst\] \n→ "

# Este prompt muestra el directorio, la máquina y la hora en dos líneas.
#PS1='\e[1;33;47m\u \e[1;32;47mon \h \e[1;35;47m\d \@\e[0;0m\n\e[1;34m[dir.= \w] \# > \e[0;0m'




# Este maravilloso prompt es obtenido de http://www.askapache.com/linux-unix/bash-power-prompt.html

 # # now this is where things gets really farout, figure out how this works and you'll learn alot


 #        export AA_P="export PVE=\"\\033[m\\033[38;5;2m\"\$(( \`sed -nu \"s/MemFree:[\\t ]\\+\\([0-9]\\+\\) kB/\\1/p\" /proc/meminfo\` / 1024 ))\"\\033[38;5;22m/\"\$((\`sed -nu \"s/MemTotal:[\\t ]\\+\\([0-9]\\+\\) kB/\\1/p\" /proc/meminfo\`/ 1024 ))MB\"\\t\\033[m\\033[38;5;55m\$(< /proc/loadavg)\\033[m\";echo -en \"$PVE\""
 #        eval "$AA_P" && export PROMPT_COMMAND='history -a;(($SECONDS % 10==0 ))&&eval "$AA_P";echo -en "$PVE";' && eval "$AA_P";

 #        # sets up the prompt

 #        PS1='\[\e[m\n\e[1;30m\][$$:$PPID \j:\!\[\e[1;30m\]]\[\e[0;36m\] \T \d \[\e[1;30m\][\[\e[1;34m\]\u@\H\[\e[1;30m\]:\[\e[0;37m\]${SSH_TTY} \[\e[0;32m\]+${SHLVL}\[\e[1;30m\]] \[\e[1;37m\]\w\[\e[0;37m\] \n($SHLVL:\!)\$ ';


# Colores para el comando ls
LS_COLORS='no=0'
LS_COLORS=$LS_COLORS:'fi=0'
LS_COLORS=$LS_COLORS:'di=1;32'
LS_COLORS=$LS_COLORS:'ln=1;93'
LS_COLORS=$LS_COLORS:'pi=1;93'
LS_COLORS=$LS_COLORS:'ex=0'
export LS_COLORS



# Colores para los man pages
export LESS_TERMCAP_mb=$'\E[01;31m' # begin blinking
export LESS_TERMCAP_md=$'\E[01;38;5;74m' # begin bold
export LESS_TERMCAP_me=$'\E[0m' # end mode
export LESS_TERMCAP_se=$'\E[0m' # end standout-mode
export LESS_TERMCAP_so=$'\E[38;5;246m' # begin standout-mode - info box
export LESS_TERMCAP_ue=$'\E[0m' # end underline
export LESS_TERMCAP_us=$'\E[04;38;5;146m' # begin underline


# don't put duplicate lines in the history. See bash(1) for more options
# don't overwrite GNU Midnight Commander's setting of `ignorespace'.
HISTCONTROL=$HISTCONTROL${HISTCONTROL+:}ignoredups
# ... or force ignoredups and ignorespace
HISTCONTROL=ignoreboth

# append to the history file, don't overwrite it
shopt -s histappend

# for setting history length see HISTSIZE and HISTFILESIZE in bash(1)

# check the window size after each command and, if necessary,
# update the values of LINES and COLUMNS.
shopt -s checkwinsize

# set variable identifying the chroot you work in (used in the prompt below)
if [ -z "$debian_chroot" ] && [ -r /etc/debian_chroot ]; then
    debian_chroot=$(cat /etc/debian_chroot)
fi

force_color_prompt=yes


if [ -n "$force_color_prompt" ]; then
    if [ -x /usr/bin/tput ] && tput setaf 1 >&/dev/null; then
	# We have color support; assume it's compliant with Ecma-48
	# (ISO/IEC-6429). (Lack of such support is extremely rare, and such
	# a case would tend to support setf rather than setaf.)
	color_prompt=yes
    else
	color_prompt=
    fi
fi


# enable color support of ls and also add handy aliases
if [ -x /usr/bin/dircolors ]; then
    test -r ~/.dircolors && eval "$(dircolors -b ~/.dircolors)" || eval "$(dircolors -b)"
    alias ls='ls --color=auto'
fi

# enable programmable completion features (you don't need to enable
# this, if it's already enabled in /etc/bash.bashrc and /etc/profile
# sources /etc/bash.bashrc).
if [ -f /etc/bash_completion ] && ! shopt -oq posix; then
    . /etc/bash_completion
fi









