#+TITLE: Mi Configuración de GNU EMACS
#+AUTHOR: Adolfo De Unánue
#+EMAIL: nanounanue@gmail.com

* Intro
  :PROPERTIES:
  :header-args:emacs-lisp: :tangle ~/.emacs.d/personal/nano-emacs.el
  :END:


  Mi configuración de emacs está en este archivo.
  Por supuesto, nunca está estable, siempre estoy agregando y probando cosas
  nuevas que me hagan la vida más fácil y divertida.

  *NOTA*: En esta encarnación, esta configuración depende de [[https://github.com/bbatsov/prelude][emacs-prelude]]


** Configuración de paquetes

*** =use-package=

    Esto hará que todo sea más ordenado.

    #+BEGIN_SRC emacs-lisp
      (unless (package-installed-p 'use-package)
        (package-refresh-contents)
        (package-install 'use-package))
      (setq use-package-always-ensure t)
    #+END_SRC

    #+RESULTS:
    : t


*** Más paquetes

** Personal info

#+BEGIN_SRC emacs-lisp
(setq user-full-name "Adolfo De Unánue")
(setq user-mail-address "nanounanue@gmail.com")
#+END_SRC

#+RESULTS:
: nanounanue@gmail.com

** Interfaz

*** Inicio

*** Cosas a quitar

No soy /gurú/ ...

    #+BEGIN_SRC emacs-lisp
      (setq prelude-guru nil)
    #+END_SRC

    #+RESULTS:

No me gusta que el =scratch buffer= contenga texto

#+BEGIN_SRC emacs-lisp
  (setq initial-scratch-message "")
#+END_SRC

#+RESULTS:

*** =rainbowdelimiters=

#+BEGIN_SRC emacs-lisp
  (use-package rainbow-delimiters
    :commands (rainbow-delimiters-mode)
    :init
    (add-hook 'prog-mode-hook #'rainbow-delimiters-mode))
#+END_SRC

#+RESULTS:
| rainbow-delimiters-mode | (lambda nil (setq prettify-symbols-alist (quote ((in . 8712) (not in . 8713) (not . 10071) (return . 10236) (yield . 10235) (for . 8704) (function . 955) (<> . 8800) (!= . 8800) (exists . 398) (in . 8712) (sum . 425) (complex numbers . 8450) (integer numbers . 8484) (natural numbers . 8469) (int . 8484) (float . 8477) (str . 120138) (True . 120139) (False . 120125) (Dict . 120071) (List . 8466) (Tuple . 10754) (Set . 8486) (Iterable . 120074) (Any . 10068) (Union . 8899))))) |


*** =all-the-icons=

    #+BEGIN_SRC emacs-lisp
      (use-package all-the-icons
        :config
        (use-package all-the-icons-dired
          :config
          (add-hook 'dired-mode-hook 'all-the-icons-dired-mode)
          )
        )
    #+END_SRC

    #+RESULTS:
    : t

*** =gitter=

    Muestra los cambios en archivos controlados por =git=

    #+BEGIN_SRC emacs-lisp
      (use-package git-gutter+
        :diminish
        :defer t
        :config
        (global-git-gutter+-mode)
        )
    #+END_SRC

    #+RESULTS:

*** Símbolos (=pretty-mode=)

    #+BEGIN_SRC emacs-lisp
      (use-package pretty-mode
        :ensure t
        :config
        (global-pretty-mode t)

        (pretty-deactivate-groups
         '(:equality :ordering :ordering-double :ordering-triple
                     :arrows :arrows-twoheaded :punctuation
                     :logic :sets))

        (pretty-activate-groups
         '(:sub-and-superscripts :greek :arithmetic-nary :parentheses
                                 :types :arrows-tails  :arrows-tails-double
                                 :logic :sets :equality :ordering
                                 :arrows :arrows-twoheaded ))
        )
    #+END_SRC

    #+RESULTS:
    : t

    Además activamos otros símbolos en =prettify-symbols-alist=

    #+BEGIN_SRC emacs-lisp
      (add-hook
       'prog-mode-hook
       (lambda ()
         (setq prettify-symbols-alist
               '(;; Syntax
                 ("in" .       #x2208)
                 ("not in" .   #x2209)
                 ("not" .      #x2757)
                 ("return" .   #x27fc)
                 ("yield" .    #x27fb)
                 ("for" .      #x2200)
                 ("function" . ?λ)
                 ("<>" . ?≠)
                 ("!=" . ?≠)
                 ("exists" . ?Ǝ)
                 ("in" . ?∈)
                 ("sum" . ?Ʃ)
                 ("complex numbers" . ?ℂ)
                 ("integer numbers" . ?ℤ)
                 ("natural numbers" . ?ℕ)
                 ;; Base Types
                 ("int" .      #x2124)
                 ("float" .    #x211d)
                 ("str" .      #x1d54a)
                 ("True" .     #x1d54b)
                 ("False" .    #x1d53d)
                 ;; python
                 ("Dict" .     #x1d507)
                 ("List" .     #x2112)
                 ("Tuple" .    #x2a02)
                 ("Set" .      #x2126)
                 ("Iterable" . #x1d50a)
                 ("Any" .      #x2754)
                 ("Union" .    #x22c3)))))
      (global-prettify-symbols-mode t)

    #+END_SRC

    #+RESULTS:
    : t

*** =avy=

    #+BEGIN_SRC emacs-lisp
      (use-package avy
        :ensure t
        :commands avy-goto-word-1 avy-goto-char-1 avy-goto-line avy-goto-char-timer
        :bind (("s-." . avy-goto-word-or-subword-1)
               ("s-," . avy-goto-char)
               ("C-l"     . avy-goto-word-1))
        )
    #+END_SRC

    #+RESULTS:

*** Acomodo /agresivo/

    #+BEGIN_SRC emacs-lisp
      ;; Aggressive-fill
      (use-package aggressive-fill-paragraph
        :ensure t
        :disabled
        :config
        (afp-setup-recommended-hooks)
        ;; to enable the minor mode in all places where it might be useful. Alternatively use
        ;;(add-hook '[major-mode-hook] #'aggressive-fill-paragraph-mode)
        )

      ;; Aggressive-indent
      (use-package aggressive-indent
        :ensure t
        :config
        ;; (global-aggressive-indent-mode 1)
        (add-to-list 'aggressive-indent-excluded-modes 'html-mode)
        (add-hook 'emacs-lisp-mode-hook #'aggressive-indent-mode)
        (add-hook 'clojure-mode-hook #'aggressive-indent-mode)
        (add-hook 'ruby-mode-hook #'aggressive-indent-mode)
        (add-hook 'css-mode-hook #'aggressive-indent-mode)
        )
    #+END_SRC

    #+RESULTS:
    : t

*** Edición multi-línea

    [[http://emacsrocks.com/e13.html][Ejemplo de uso]]

    #+BEGIN_SRC emacs-lisp
      ;; Edición de múltiples líneas
      (use-package multiple-cursors
        :diminish multiple-cursors-mode
        :defer t
        :init
        (global-set-key (kbd "C->") 'mc/mark-next-like-this)
        (global-set-key (kbd "C-<") 'mc/mark-previous-like-this)
        (global-set-key (kbd "C-c C-<") 'mc/mark-all-like-this)
        )
    #+END_SRC

    #+RESULTS:

*** =undo-tree=

    Recorre el /buffer/ mostrando un árbol

    #+BEGIN_SRC emacs-lisp
      (use-package undo-tree  ;; C-x u
        :ensure t
        :config
        (progn
          (global-undo-tree-mode)
          (setq undo-tree-visualizer-timestamps t))
        :diminish undo-tree-mode
        )
    #+END_SRC

    #+RESULTS:
    : t

*** =swiper= / =ivy= / =counsel=

    [[https://github.com/abo-abo/swiper][swiper]] es una biblioteca similar a =helm=  pero más ligera


    #+BEGIN_SRC emacs-lisp
      ;; it looks like counsel is a requirement for swiper
      (use-package counsel
        :ensure t
        )

      (use-package swiper
        :init (ivy-mode 1)
        :ensure try
        :bind (
               ("C-s" . swiper)
               ("C-r" . swiper)
               ("M-x" . counsel-M-x)
               ("C-x C-f" . counsel-find-file)
               ("C-c C-r" . ivy-resume)
               ("<f6>" . ivy-resume)
               ("C-c h m" . woman)
               ("C-x b" . ivy-switch-buffer)
               ("C-c u" . swiper-all)
               ("<f1> f" . counsel-describe-function)
               ("<f1> v" . counsel-describe-variable)
               ("<f1> l" . counsel-load-library)
               ("<f2> i" . counsel-info-lookup-symbol)
               ("<f2> u" . counsel-unicode-char)
               ("C-c g" . counsel-git)
               ("C-c j" . counsel-git-grep)
               ("C-c k" . counsel-ag)
               ("C-x l" . counsel-locate)
               ("C-S-o" . counsel-rhythmbox)
               )
        :config
        (setq ivy-use-virtual-buffers t
              ivy-count-format "%d/%d ")
        (setq projectile-completion-system 'ivy)                   ;; Habilitamos ivy en projectile
        (setq magit-completing-read-function 'ivy-completing-read) ;; Habilitamos ivy en magit

        ;; Tomado de scimax
        (ivy-set-actions
         t
         '(("i" (lambda (x) (with-ivy-window
                              (insert x))) "insert candidate")
           (" " (lambda (x) (ivy-resume)) "resume")
           ("?" (lambda (x)
                  (interactive)
                  (describe-keymap ivy-minibuffer-map)) "Describe keys")))

        ;; ** Acciones para counsel-find-file
        ;; Tomado de scimax
        (ivy-add-actions
         'counsel-find-file
         '(("a" (lambda (x)
                  (unless (memq major-mode '(mu4e-compose-mode message-mode))
                    (compose-mail))
                  (mml-attach-file x)) "Attach to email")
           ("c" (lambda (x) (kill-new (f-relative x))) "Copy relative path")
           ("4" (lambda (x) (find-file-other-window x)) "Open in new window")
           ("5" (lambda (x) (find-file-other-frame x)) "Open in new frame")
           ("C" (lambda (x) (kill-new x)) "Copy absolute path")
           ("d" (lambda (x) (dired x)) "Open in dired")
           ("D" (lambda (x) (delete-file x)) "Delete file")
           ("e" (lambda (x) (shell-command (format "open %s" x)))
            "Open in external program")
           ("f" (lambda (x)
                  "Open X in another frame."
                  (find-file-other-frame x))
            "Open in new frame")
           ("p" (lambda (path)
                  (with-ivy-window
                    (insert (f-relative path))))
            "Insert relative path")
           ("P" (lambda (path)
                  (with-ivy-window
                    (insert path)))
            "Insert absolute path")
           ("l" (lambda (path)
                  "Insert org-link with relative path"
                  (with-ivy-window
                    (insert (format "[[./%s]]" (f-relative path)))))
            "Insert org-link (rel. path)")
           ("L" (lambda (path)
                  "Insert org-link with absolute path"
                  (with-ivy-window
                    (insert (format "[[%s]]" path))))
            "Insert org-link (abs. path)")
           ("r" (lambda (path)
                  (rename-file path (read-string "New name: ")))
            "Rename")))
        )

      (use-package ivy-hydra
        :ensure t
        )

      (use-package counsel-projectile
        :ensure t
        :after counsel
        :config
        (counsel-projectile-on)
        )
    #+END_SRC

    #+RESULTS:
    : t


*** Arreglando otras cosas de GNU/Emacs

Muestra el paréntesis que hace /match/

#+BEGIN_SRC emacs-lisp
  (defvar show-paren-delay)
  (setq show-paren-delay 0.0)
  (show-paren-mode t)
#+END_SRC

#+RESULTS:
: t

Número de columnas

#+BEGIN_SRC emacs-lisp
  (column-number-mode t)
#+END_SRC

#+RESULTS:
: t

Archivos temporales de GNU/Emacs, todos a un sólo lugar

#+BEGIN_SRC emacs-lisp
  (setq backup-directory-alist `((".*" . "~/tmp/.emacs"))
        auto-save-file-name-transforms `((".*" , "~/tmp/.emacs" t)))
#+END_SRC

#+RESULTS:
| .* | ~/tmp/.emacs | t |

Si algún programa cambia un archivo que está abierto en GNU/Emacs,
automáticamente actualizar los cambios

#+BEGIN_SRC emacs-lisp
(global-auto-revert-mode t)
#+END_SRC

#+RESULTS:
: t

Si un archivo empieza con /she-bang/ =#!= , volverlo ejecutable

#+BEGIN_SRC emacs-lisp
(add-hook 'after-save-hook
        'executable-make-buffer-file-executable-if-script-p)
#+END_SRC

#+RESULTS:
| rmail-after-save-hook | sml/generate-buffer-identification | executable-make-buffer-file-executable-if-script-p |


** Major modes

*** Emacs string manipulation

Esto es requerido por algunos paquetes

#+BEGIN_SRC emacs-lisp
(use-package s)
#+END_SRC

#+RESULTS:

*** =cider=

#+BEGIN_SRC emacs-lisp
  (use-package cider
    :ensure t
    )
#+END_SRC

#+RESULTS:


*** =org-mode=

    Una de las grandes ventajas de GNU/Emacs es =org-mode=


**** /Embellecedor/

     #+BEGIN_SRC emacs-lisp
       (ignore-errors
         (use-package org-beautify-theme
           :ensure t)
         )

     #+END_SRC

     #+RESULTS:

**** Cuerpo principal

     #+BEGIN_SRC emacs-lisp
     (use-package org
       :ensure t
       :mode ("\\.org\\'" . org-mode)
       :bind (("C-c l" . org-store-link)
              ("C-c c" . org-capture)
              ("C-c a" . org-agenda)
              ("C-c b" . org-iswitchb)
              ("C-c C-w" . org-refile)
              ("C-c C-v t" . org-babel-tangle)
              ("C-c C-v f" . org-babel-tangle-file)
              ("C-c j" . org-clock-goto)
              ("C-c C-x C-o" . org-clock-out)
              )

       :init
       (add-hook 'org-babel-after-execute-hook 'org-display-inline-images)
       (add-hook 'org-mode-hook 'org-display-inline-images)
       (add-hook 'org-mode-hook 'org-babel-result-hide-all)
       (add-hook 'org-mode-hook 'turn-on-auto-fill)


       :config
       (progn
         (setq org-directory "~/Dropbox/org")

         (setq org-use-speed-commands t)

         (add-to-list 'org-modules 'org-habit)

         (add-to-list 'org-speed-commands-user (cons "P" 'org-set-property))
         (add-to-list 'org-speed-commands-user (cons "d" 'org-deadline))

         ;; Mark a subtree
         (add-to-list 'org-speed-commands-user (cons "m" 'org-mark-subtree))

         ;; Widen
         (add-to-list 'org-speed-commands-user (cons "S" 'widen))

         ;; kill a subtree
         (add-to-list 'org-speed-commands-user (cons "k" (lambda ()
                                                           (org-mark-subtree)
                                                           (kill-region
                                                            (region-beginning)
                                                            (region-end)))))

         ;; Jump to headline
         (add-to-list 'org-speed-commands-user
                      (cons "q" (lambda ()
                                  (avy-with avy-goto-line
                                    (avy--generic-jump "^\\*+" nil avy-style)))))


         ;; Enable pretty entities - shows e.g. α β γ as UTF-8 characters.
         (setq org-pretty-entities t)
         ;; Ensure native syntax highlighting is used for inline source blocks in org files
         (setq org-src-fontify-natively t)
         (setq org-src-tab-acts-natively t)
         (setq org-edit-src-content-indentation 0)

         (setq org-hide-emphasis-markers t)
         ;; I can display inline images. Set them to have a maximum size so large images don't fill the screen.
         (setq org-image-actual-width 800)
         (setq org-ellipsis "⤵");; ⤵ ≫ ⚡⚡⚡

         ;; make available "org-bullet-face" such that I can control the font size individually
         (setq org-bullets-face-name (quote org-bullet-face))

         ;; Agenda

         ;; record time I finished a task when I change it to DONE
         (setq org-log-done 'time)

         ;; I don't want to see things that are done. turn that off here.
         ;; http://orgmode.org/manual/Global-TODO-list.html#Global-TODO-list
         (setq org-agenda-skip-scheduled-if-done t)
         (setq org-agenda-skip-deadline-if-done t)
         (setq org-agenda-skip-timestamp-if-done t)
         (setq org-agenda-todo-ignore-scheduled t)
         (setq org-agenda-todo-ignore-deadlines t)
         (setq org-agenda-todo-ignore-timestamp t)
         (setq org-agenda-todo-ignore-with-date t)
         (setq org-agenda-start-on-weekday nil) ;; start on current day

         (setq org-upcoming-deadline '(:foreground "blue" :weight bold))

         ;; use timestamps in date-trees. for the journal
         (setq org-datetree-add-timestamp 'active)
         (setq org-agenda-files (quote ("~/Dropbox/org"
                                        "~/Dropbox/org/research.org"
                                        "~/Dropbox/org/consultancy.org"
                                        "~/Dropbox/org/previta.org"
                                        "~/Dropbox/org/anglobal.org"
                                        "~/Dropbox/org/datank.org"
                                        "~/Dropbox/org/dsapp.org"
                                        "~/Dropbox/org/gasolinerias.org"
                                        "~/Dropbox/org/ligamx.org"
                                        "~/Dropbox/org/vigilamos.org"
                                        "~/Dropbox/org/personal.org"
                                        "~/Dropbox/org/proyectos.org"
                                        )))


         ;; Resume clocking task when emacs is restarted
         (org-clock-persistence-insinuate)
         ;;
         ;; Show lot of clocking history so it's easy to pick items off the C-F11 list
         (setq org-clock-history-length 23)
         ;; Resume clocking task on clock-in if the clock is open
         (setq org-clock-in-resume t)
         ;; Change tasks to NEXT when clocking in
         (setq org-clock-in-switch-to-state 'nanounanue/clock-in-to-next)
         ;; Separate drawers for clocking and logs
         (setq org-drawers (quote ("PROPERTIES" "LOGBOOK")))
         ;; Save clock data and state changes and notes in the LOGBOOK drawer
         (setq org-clock-into-drawer t)
         ;; Sometimes I change tasks I'm clocking quickly - this removes clocked tasks with 0:00 duration
         (setq org-clock-out-remove-zero-time-clocks t)
         ;; Clock out when moving task to a done state
         (setq org-clock-out-when-done t)
         ;; Save the running clock and all clock history when exiting Emacs, load it on startup
         (setq org-clock-persist t)
         ;; Do not prompt to resume an active clock
         (setq org-clock-persist-query-resume nil)
         ;; Enable auto clock resolution for finding open clocks
         (setq org-clock-auto-clock-resolution (quote when-no-clock-is-running))
         ;; Include current clocking task in clock reports
         (setq org-clock-report-include-clocking-task t)



         (setq org-agenda-custom-commands
               '(("w" "Weekly Review"
                  ( ;; deadlines
                   (tags-todo "+DEADLINE<=\"<today>\""
                              ((org-agenda-overriding-header "Late Deadlines")))
                   ;; scheduled  past due
                   (tags-todo "+SCHEDULED<=\"<today>\""
                              ((org-agenda-overriding-header "Late Scheduled")))

                   ;; now the agenda
                   (agenda ""
                           ((org-agenda-overriding-header "weekly agenda")
                            (org-agenda-ndays 7)
                            (org-agenda-tags-todo-honor-ignore-options t)
                            (org-agenda-todo-ignore-scheduled nil)
                            (org-agenda-todo-ignore-deadlines nil)
                            (org-deadline-warning-days 0)))
                   ;; and last a global todo list
                   (todo "TODO")))
                 ("d" "Agenda diaria"
                  ((tags "PRIORIY=\"A\""
                         ((org-agenda-skip-function '(org-agenda-skip-entry-if 'todo 'done))
                          (org-agenda-overriding-header "Tasks de alta prioridad sin terminar:")))
                   (agenda "" ((org-agenda-ndays 1)))
                   (alltodo ""
                            ((org-agendaskip-function
                              '(or (nanounanue/org-skip-subtree-if-priority ?A)
                                  (org-agenda-skip-if nil '(scheduled deadline))))
                             (org-agenda-overriding-header "ALL tasks de prioridad normal:"))))
                  )
                 ("N" "Notes" tags "NOTE"
                  ((org-agenda-overriding-header "Notes")
                   (org-tags-match-list-sublevels t))
                  )
                 (" " "Agenda"
                  ((agenda "" nil)
                   (tags "REFILE"
                         ((org-agenda-overriding-header "Tasks to Refile")
                          (org-tags-match-list-sublevels nil)))
                   (tags-todo "-CANCELLED/!"
                              ((org-agenda-overriding-header "Stuck Projects")
                               (org-agenda-skip-function 'nanounanue/skip-non-stuck-projects)
                               (org-agenda-sorting-strategy
                                '(category-keep))))
                   (tags-todo "-HOLD-CANCELLED/!"
                              ((org-agenda-overriding-header "Projects")
                               (org-agenda-skip-function 'nanounanue/skip-non-projects)
                               (org-tags-match-list-sublevels 'indented)
                               (org-agenda-sorting-strategy
                                '(category-keep))))
                   (tags-todo "-CANCELLED/!NEXT"
                              ((org-agenda-overriding-header (concat "Project Next Tasks"
                                                                     (if nanounanue/hide-scheduled-and-waiting-next-tasks
                                                                         ""
                                                                       " (including WAITING and SCHEDULED tasks)")))
                               (org-agenda-skip-function 'nanounanue/skip-projects-and-habits-and-single-tasks)
                               (org-tags-match-list-sublevels t)
                               (org-agenda-todo-ignore-scheduled nanounanue/hide-scheduled-and-waiting-next-tasks)
                               (org-agenda-todo-ignore-deadlines nanounanue/hide-scheduled-and-waiting-next-tasks)
                               (org-agenda-todo-ignore-with-date nanounanue/hide-scheduled-and-waiting-next-tasks)
                               (org-agenda-sorting-strategy
                                '(todo-state-down effort-up category-keep))))
                   (tags-todo "-REFILE-CANCELLED-WAITING-HOLD/!"
                              ((org-agenda-overriding-header (concat "Project Subtasks"
                                                                     (if nanounanue/hide-scheduled-and-waiting-next-tasks
                                                                         ""
                                                                       " (including WAITING and SCHEDULED tasks)")))
                               (org-agenda-skip-function 'nanounanue/skip-non-project-tasks)
                               (org-agenda-todo-ignore-scheduled nanounanue/hide-scheduled-and-waiting-next-tasks)
                               (org-agenda-todo-ignore-deadlines nanounanue/hide-scheduled-and-waiting-next-tasks)
                               (org-agenda-todo-ignore-with-date nanounanue/hide-scheduled-and-waiting-next-tasks)
                               (org-agenda-sorting-strategy
                                '(category-keep))))
                   (tags-todo "-REFILE-CANCELLED-WAITING-HOLD/!"
                              ((org-agenda-overriding-header (concat "Standalone Tasks"
                                                                     (if nanounanue/hide-scheduled-and-waiting-next-tasks
                                                                         ""
                                                                       " (including WAITING and SCHEDULED tasks)")))
                               (org-agenda-skip-function 'nanounanue/skip-project-tasks)
                               (org-agenda-todo-ignore-scheduled nanounanue/hide-scheduled-and-waiting-next-tasks)
                               (org-agenda-todo-ignore-deadlines nanounanue/hide-scheduled-and-waiting-next-tasks)
                               (org-agenda-todo-ignore-with-date nanounanue/hide-scheduled-and-waiting-next-tasks)
                               (org-agenda-sorting-strategy
                                '(category-keep))))
                   (tags-todo "-CANCELLED+WAITING|HOLD/!"
                              ((org-agenda-overriding-header (concat "Waiting and Postponed Tasks"
                                                                     (if nanounanue/hide-scheduled-and-waiting-next-tasks
                                                                         ""
                                                                       " (including WAITING and SCHEDULED tasks)")))
                               (org-agenda-skip-function 'nanounanue/skip-non-tasks)
                               (org-tags-match-list-sublevels nil)
                               (org-agenda-todo-ignore-scheduled nanounanue/hide-scheduled-and-waiting-next-tasks)
                               (org-agenda-todo-ignore-deadlines nanounanue/hide-scheduled-and-waiting-next-tasks)))
                   (tags "-REFILE/"
                         ((org-agenda-overriding-header "Tasks to Archive")
                          (org-agenda-skip-function 'nanounanue/skip-non-archivable-tasks)
                          (org-tags-match-list-sublevels nil))))
                  nil))

               )

         ;; Refile
         (setq org-default-notes-file "~/Dropbox/org/refile.org")

         ;; Capture templates for: TODO tasks, Notes, appointments, phone calls, meetings, and org-protocol
         (setq org-capture-templates
               (quote (("t" "todo" entry (file "~/Dropbox/org/refile.org")
                        "* ▶ TODO %?\n%U\n%a\n" :clock-in t :clock-resume t)
                       ("R" "respond" entry (file "~/Dropbox/org/refile.org")
                        "* ★ NEXT Respond to %:from on %:subject\nSCHEDULED: %t\n%U\n%a\n" :clock-in t :clock-resume t )
                       ("n" "note" entry (file "~/Dropbox/org/refile.org")
                        "* 🗒 %?:NOTE\n%U\n%a\n" :clock-in t :clock-resume t)
                       ("r" "research" entry (file "~/Dropbox/org/research.org")
                        "* %? :IDEA:\n%U\n%a\n" :clock-in t :clock-resume t)
                       ("j" "Journal" entry (file+datetree "~/Dropbox/org/diary.org")
                        "* %?\n%U\n" :clock-in t :clock-resume t)
                       ("i" "idea" entry (file+headline "~/Dropbox/org/ideas.org" "Someday/Maybe")
                        "💡 IDEA %?\nAgregada: %U\n" :prepend t :kill-buffer )
                       ("m" "Meeting" entry (file "~/Dropbox/org/refile.org")
                        "* ⛹ MEETING with %? :MEETING:\n%U" :clock-in t :clock-resume t)
                       )))

         ;; Targets include this file and any file contributing to the agenda - up to 9 levels deep
         (setq org-refile-targets (quote ((nil :maxlevel . 9)
                                          (org-agenda-files :maxlevel . 9))))
         ;; Use full outline paths for refile targets
         (setq org-refile-use-outline-path t)

         ;;
         (setq org-outline-path-complete-in-steps nil)

         ;; Allow refile to create parent tasks with confirmatio
         (setq org-refile-allow-creating-parent-nodes (quote confirm))

         (setq org-todo-keywords '(
                                   (sequence
                                    "▶ TODO(t)"
                                    "🍽 INPROGRESS(p)"
                                    "|"
                                    "✔ DONE(d)")
                                   (sequence "⚑ WAITING(w@/!)" "🚪 HOLD(h@/!)" "|")
                                   (sequence "☎ PHONE(z)" "⛹ MEETING(x)" "|")
                                   (sequence "|" "✘ CANCELLED(c@/!)"
                                             "SOMEDAY(f)"
                                             )))


         (setq org-todo-keyword-faces
               (quote (
                       ("💡 IDEA" :foreground "CadetBlue2" :weight bold)
                       ("▶ TODO" :foreground "red" :weight bold)
                       ("🍽 INPROGRESS" :foreground "OrangeRed" :weight bold)
                       ("★ NEXT  :foreground" "blue" :weight bold)
                       ("✔ DONE" :foreground "forest green" :weight bold)
                       ("⚑ WAITING" :foreground "orange" :weight bold)
                       ("🚪 HOLD" :foreground "magenta" :weight bold)
                       ("✘ CANCELLED" :foreground "IndianRed1" :weight bold)
                       ("☎ PHONE" :foreground "forest green" :weight bold)
                       ("⛹ MEETING" :foreground "LimeGreen" :weight bold)
                       )))



         (setq org-todo-state-tags-triggers
               (quote (("✘ CANCELLED" ("✘ CANCELLED" . t))
                       ("⚑ WAITING" ("⚑ WAITING" . t))
                       ("🚪 HOLD" ("⚑ WAITING") ("🚪 HOLD" . t))
                       (done ("⚑ WAITING") ("🚪 HOLD"))
                       ("▶ TODO" ("⚑ WAITING") ("✘ CANCELLED") ("🚪 HOLD"))
                       ("★ NEXT" ("⚑ WAITING") ("✘ CANCELLED") ("🚪 HOLD"))
                       ("✔ DONE" ("⚑ WAITING") ("✘ CANCELLED") ("🚪 HOLD"))
                       )
                      )
               )

         ;; Bloques
         ;; * Block templates
         ;; add <p for python expansion
         (add-to-list 'org-structure-template-alist
                      '("p" "#+BEGIN_SRC python :results output org drawer\n?\n#+END_SRC"
                        "<src lang=\"python\">\n?\n</src>"))

         ;; add <por for python expansion with raw output
         (add-to-list 'org-structure-template-alist
                      '("por" "#+BEGIN_SRC python :results output raw\n?\n#+END_SRC"
                        "<src lang=\"python\">\n?\n</src>"))

         ;; add <pv for python expansion with value
         (add-to-list 'org-structure-template-alist
                      '("pv" "#+BEGIN_SRC python :results value\n?\n#+END_SRC"
                        "<src lang=\"python\">\n?\n</src>"))

         ;; add <el for emacs-lisp expansion
         (add-to-list 'org-structure-template-alist
                      '("el" "#+BEGIN_SRC emacs-lisp\n?\n#+END_SRC"
                        "<src lang=\"emacs-lisp\">\n?\n</src>"))

         (add-to-list 'org-structure-template-alist
                      '("ell" "#+BEGIN_SRC emacs-lisp :lexical t\n?\n#+END_SRC"
                        "<src lang=\"emacs-lisp\">\n?\n</src>"))

         ;; add <sh for shell
         (add-to-list 'org-structure-template-alist
                      '("sh" "#+BEGIN_SRC sh\n?\n#+END_SRC"
                        "<src lang=\"shell\">\n?\n</src>"))

         (add-to-list 'org-structure-template-alist
                      '("lh" "#+latex_header: " ""))

         (add-to-list 'org-structure-template-alist
                      '("lc" "#+latex_class: " ""))

         (add-to-list 'org-structure-template-alist
                      '("lco" "#+latex_class_options: " ""))

         (add-to-list 'org-structure-template-alist
                      '("ao" "#+attr_org: " ""))

         (add-to-list 'org-structure-template-alist
                      '("al" "#+attr_latex: " ""))

         (add-to-list 'org-structure-template-alist
                      '("ca" "#+caption: " ""))

         (add-to-list 'org-structure-template-alist
                      '("tn" "#+tblname: " ""))

         (add-to-list 'org-structure-template-alist
                      '("n" "#+name: " ""))

         (add-to-list 'org-structure-template-alist
                      '("o" "#+options: " ""))

         (add-to-list 'org-structure-template-alist
                      '("ti" "#+title: " ""))


         ;; Org-babel


         ;; No preguntar para confirmar la evaluación
         (setq org-confirm-babel-evaluate nil)

         ;; O en la exportación
         (setq org-export-babel-evaluate nil)

         (setq org-confirm-elisp-link-function nil)
         (setq org-confirm-shell-link-function nil)

         ;; Paths a ditaa y plantuml
         (setq org-ditaa-jar-path "~/software/org-libs/ditaa.jar")
         (setq org-plantuml-jar-path "~/software/org-libs/plantuml.jar")


         (require 'ob-clojure)
         (setq org-babel-clojure-backend 'cider)
         (org-babel-do-load-languages
          'org-babel-load-languages
          '(

            (shell      . t)
            (R          . t)
            (awk        . t)
            (sed        . t)
            (org        . t)
            (latex      . t)
            (emacs-lisp . t)
            (clojure    . t)
            (stan       . t)
            (ipython    . t)
            (ruby       . t)
            (dot        . t)
            (scala      . t)
            (sqlite     . t)
            (sql        . t)
            (ditaa      . t)
            (plantuml   . t)
            (mongo      . t)
            (cypher     . t)
            (redis      . t)
            (blockdiag  . t)
            (ipython    . t)
            )
          )

         ;; LaTeX
         (setq org-export-latex-listings 'minted)
         (setq org-export-latex-minted-options
               '(("frame" "lines")
                 ("fontsize" "\\scriptsize")
                 ("linenos" "")
                 ))
         (setq org-latex-to-pdf-process
               '("latexmk -xelatex='xelatex --shell-escape -interaction nonstopmode' -f  %f")) ;; for multiple passes


         (defun ivy-insert-org-entity ()
           "Insert an org-entity using ivy."
           (interactive)
           (ivy-read "Entity: " (loop for element in (append org-entities org-entities-user)
                                      when (not (stringp element))
                                      collect
                                      (cons
                                       (format "%10s | %s | %s | %s"
                                               (car element) ;name
                                               (nth 1 element) ; latex
                                               (nth 3 element) ; html
                                               (nth 6 element)) ;utf-8
                                       element))
                     :require-match t
                     :action '(1
                               ("u" (lambda (element) (insert (nth 6 (cdr element)))) "utf-8")
                               ("o" (lambda (element) (insert "\\" (cadr element))) "org-entity")
                               ("l" (lambda (element) (insert (nth 1 (cdr element)))) "latex")
                               ("h" (lambda (element) (insert (nth 3 (cdr element)))) "html"))))


         ;; * ivy navigation
         (defun ivy-org-jump-to-visible-headline ()
           "Jump to visible headline in the buffer."
           (interactive)
           (org-mark-ring-push)
           (avy-with avy-goto-line (avy--generic-jump "^\\*+" nil avy-style)))


         (defun ivy-jump-to-visible-sentence ()
           "Jump to visible sentence in the buffer."
           (interactive)
           (org-mark-ring-push)
           (avy-with avy-goto-line (avy--generic-jump (sentence-end) nil avy-style))
           (forward-sentence))


         (defun ivy-org-jump-to-heading ()
           "Jump to heading in the current buffer."
           (interactive)
           (let ((headlines '()))
             (save-excursion
               (goto-char (point-min))
               (while (re-search-forward
                       ;; this matches org headings in elisp too.
                       "^\\(;; \\)?\\(\\*+\\)\\(?: +\\(.*?\\)\\)?[    ]*$"  nil t)
                 (cl-pushnew (list
                              (format "%-80s"
                                      (match-string 0))
                              (cons 'position (match-beginning 0)))
                             headlines)))
             (ivy-read "Headline: "
                       (reverse headlines)
                       :action (lambda (candidate)
                                 (org-mark-ring-push)
                                 (goto-char (cdr (assoc 'position candidate)))
                                 (outline-show-entry)))))


         (defun ivy-org-jump-to-agenda-heading ()
           "Jump to a heading in an agenda file."
           (interactive)
           (let ((headlines '()))
             ;; these files should be open already since they are agenda files.
             (loop for file in (org-agenda-files) do
                   (with-current-buffer (find-file-noselect file)
                     (save-excursion
                       (goto-char (point-min))
                       (while (re-search-forward org-heading-regexp nil t)
                         (cl-pushnew (list
                                      (format "%-80s (%s)"
                                              (match-string 0)
                                              (file-name-nondirectory file))
                                      :file file
                                      :position (match-beginning 0))
                                     headlines)))))
             (ivy-read "Headline: "
                       (reverse headlines)
                       :action (lambda (candidate)
                                 (org-mark-ring-push)
                                 (find-file (plist-get (cdr candidate) :file))
                                 (goto-char (plist-get (cdr candidate) :position))
                                 (outline-show-entry)))))


         (defun ivy-org-jump-to-heading-in-files (files &optional fontify)
           "Jump to org heading in FILES.
                 Optional FONTIFY colors the headlines. It might slow things down
                 a lot with large numbers of org-files or long org-files. This
                 function does not open the files."
           (let ((headlines '()))
             (loop for file in files do
                   (with-temp-buffer
                     (insert-file-contents file)
                     (when fontify
                       (org-mode)
                       (font-lock-fontify-buffer))
                     (goto-char (point-min))
                     (while (re-search-forward org-heading-regexp nil t)
                       (cl-pushnew (list
                                    (format "%-80s (%s)"
                                            (match-string 0)
                                            (file-name-nondirectory file))
                                    :file file
                                    :position (match-beginning 0))
                                   headlines))))
             (ivy-read "Headline: "
                       (reverse headlines)
                       :action (lambda (candidate)
                                 (org-mark-ring-push)
                                 (find-file (plist-get (cdr candidate) :file))
                                 (goto-char (plist-get (cdr candidate) :position))
                                 (outline-show-entry)))))


         (defun ivy-org-jump-to-heading-in-directory (&optional recursive)
           "Jump to heading in an org file in the current directory.
                 Use a prefix arg to make it RECURSIVE.
                 Use a double prefix to make it recursive and fontified."
           (interactive "P")
           (let ((fontify nil))
             (when (equal recursive '(16))
               (setq fontify t))
             (ivy-org-jump-to-heading-in-files
              (f-entries "."
                         (lambda (f)
                           (and
                            (f-ext? f "org")
                            (not (s-contains? "#" f))))
                         recursive)
              fontify)))


         (defun ivy-org-jump-to-project-headline (&optional fontify)
           "Jump to a headline in an org-file in the current project.
                 The project is defined by projectile. Use a prefix arg FONTIFY
                 for colored headlines."
           (interactive "P")
           (ivy-org-jump-to-heading-in-files
            (mapcar
             (lambda (f) (expand-file-name f (projectile-project-root)))
             (-filter (lambda (f)
                        (and
                         (f-ext? f "org")
                         (not (s-contains? "#" f))))
                      (projectile-current-project-files)))
            fontify))


         (defun ivy-org-jump-to-open-headline (&optional fontify)
           "Jump to a headline in an open org-file.
                 Use a prefix arg FONTIFY for colored headlines."
           (interactive "P")
           (ivy-org-jump-to-heading-in-files
            (mapcar 'buffer-file-name
                    (-filter (lambda (b)
                               (-when-let (f (buffer-file-name b))
                                 (f-ext? f "org")))
                             (buffer-list)))
            fontify))



         ) ;; Fin de progn

       )  ;; Fin de use-package org
     #+END_SRC

     #+RESULTS:



**** Exportadores

     #+BEGIN_SRC emacs-lisp
       (use-package ox-twbs :config (require 'ox-twbs))
       (use-package ox-gfm :config (require 'ox-gfm))
       (use-package ox-tufte :config (require 'ox-tufte))
       (use-package ox-textile :config (require 'ox-textile))
       (use-package ox-rst :config (require 'ox-rst))
       (use-package ox-asciidoc :config (require 'ox-asciidoc))
       (use-package ox-epub :config (require 'ox-epub))
       (use-package ox-reveal :config (require 'ox-reveal))
     #+END_SRC

     #+RESULTS:
     : t

**** Componentes de =org-babel=

     *NOTA* Para [[https://github.com/corpix/ob-blockdiag.el][ob-blockdiag]] es necesario ejecutar lo siguiente:

     #+BEGIN_EXAMPLE shell
     pip install bloackdiag seqdiag actdiag nwdiag
     #+END_EXAMPLE

     El formato se puede consultar en la página de [[http://blockdiag.com/en/][blockdiag]].

     *NOTA* PAra [[https://github.com/krisajenkins/ob-browser][ob-browser]]  es necesario tener =phantomjs=:

     #+BEGIN_EXAMPLE shell
     sudo apt-get phantomjs
     #+END_EXAMPLE


     #+BEGIN_SRC emacs-lisp
     (use-package cider
       :config
       (require 'cider)
       )

     (require 'ob-emacs-lisp)

     (use-package ob-http
       :config
       (require 'ob-http)
       )

     (use-package ob-ipython
       :config
       (require 'ob-ipython)
       )

     (use-package ob-mongo
       :config
       (require 'ob-mongo)
       )

     (use-package ob-redis
       :config
       (require 'ob-redis)
       )

     (use-package ob-cypher
       :config
       (require 'ob-cypher)
       )

     (use-package ob-sql-mode
       :config
       (require 'ob-sql-mode)
       )

     (use-package ob-prolog
       :config
       (require 'ob-prolog))


     (use-package ob-blockdiag
       :config
       (require 'ob-blockdiag))

     (use-package ob-browser
       :config
       (require 'ob-browser))

     #+END_SRC

     #+RESULTS:
     : t

**** Mejoras a =ob-ipython=

     Todo el código que sigue, está tomado de [[https://github.com/jkitchin/scimax][scimax]] (copiado sin verguenza)

     #+BEGIN_SRC emacs-lisp
     ;;* Commands like the jupyter notebook has

     (defun org-babel-insert-block (&optional below)
       "Insert a src block above the current point.
     With prefix arg BELOW, insert it below the current point."
       (interactive "P")
       (cond
        ((and (org-in-src-block-p) below)
         ;; go to end, and insert block
         (let* ((src (org-element-context))
                (start (org-element-property :begin src))
                (end (org-element-property :end src))
                location)
           (goto-char start)
           (setq location (org-babel-where-is-src-block-result nil nil))
           (if (not  location)
               (goto-char end)
             (goto-char location)
             (goto-char (org-element-property :end (org-element-context))))
           (insert "\n#+BEGIN_SRC ipython

     ,#+END_SRC\n\n")
           (forward-line -3)))

        ((org-in-src-block-p)
         ;; goto begining and insert
         (goto-char (org-element-property :begin (org-element-context)))
         (insert "\n#+BEGIN_SRC ipython

     ,#+END_SRC\n\n")
         (forward-line -3))

        (t
         (beginning-of-line)
         (insert "\n#+BEGIN_SRC ipython

     ,#+END_SRC\n")
         (forward-line -2))))


     (defun org-babel-split-src-block (&optional below)
       "Split the current src block.
     With a prefix BELOW move point to lower block."
       (interactive "P")
       (let* ((el (org-element-context))
              (language (org-element-property :language el))
              (parameters (org-element-property :parameters el)))

         (beginning-of-line)
         (insert (format "#+END_SRC

     ,#+BEGIN_SRC %s %s\n" language parameters))
         (beginning-of-line)
         (when (not below)
           (org-babel-previous-src-block))))

     (define-key org-mode-map (kbd "H--") #'org-babel-split-src-block)





     #+END_SRC
**** =org-tree-slide=

     #+BEGIN_SRC emacs-lisp
       (use-package org-tree-slide
         :defer t
         :after (org)
         :bind (("C-<right>" . org-tree-slide-move-next-tree)
                ("C-<left>" . org-tree-slide-move-previous-tree)
                ("C-<up>" . org-tree-slide-content)
                )
         :init
         (setq org-tree-slide-skip-outline-level 4)
         (org-tree-slide-narrowing-control-profile)
         (setq org-tree-slide-skip-done nil)
         (org-tree-slide-presentation-profile)
         )
     #+END_SRC

     #+RESULTS:

**** =org-projectile=

     #+BEGIN_SRC emacs-lisp

       (use-package org-projectile
         :bind (("C-c n p" . org-projectile-project-todo-completing-read)
                ("C-c c" . org-capture))
         :after (org)
         :config
         (progn
           (setq org-projectile-projects-file
                 "~/Dropbox/org/projects.org")
           (setq org-agenda-files (append org-agenda-files (org-projectile-todo-files)))
           (push (org-projectile-project-todo-entry) org-capture-templates))
         :ensure t)

     #+END_SRC

     #+RESULTS:

**** =org-ref=

     #+BEGIN_SRC emacs-lisp
       (use-package org-ref
         :defer t
         :init
         (setq reftex-default-bibliography '("~/Dropbox/bibliography/references.bib"))

         ;; see org-ref for use of these variables
         (setq org-ref-bibliography-notes "~/Dropbox/bibliography/notes.org"
               org-ref-default-bibliography '("~/Dropbox/bibliography/references.bib")
               org-ref-pdf-directory "~/Dropbox/bibliography/bibtex-pdfs/")
         )
     #+END_SRC

     #+RESULTS:
     : ~/Dropbox/bibliography/bibtex-pdfs/

**** =org-present=

     #+BEGIN_SRC emacs-lisp
       (use-package org-present
         :defer t
         :after (org)
         :init
         (progn

           (add-hook 'org-present-mode-hook
                     (lambda ()
                       (global-linum-mode -1)
                       (org-present-big)
                       (org-display-inline-images)
                       (org-present-hide-cursor)
                       (org-present-read-only)))
           (add-hook 'org-present-mode-quit-hook
                     (lambda ()
                       (global-linum-mode -1)
                       (org-present-small)
                       (org-remove-inline-images)
                       (org-present-show-cursor)
                       (org-present-read-write))))
         )

     #+END_SRC

     #+RESULTS:
     : org-present

**** =org-bullets=

     #+BEGIN_SRC emacs-lisp
       (use-package org-bullets
         :defer t
         :diminish
         :disabled
         :after (org)
         :init
         (setq org-bullets-bullet-list
               '("■" "◆" "▲" "○" "☉" "◎" "◉" "○" "◌" "◎" "●" "◦" "◯" "⚪" "⚫" "⚬" "❍" "￮" "⊙" "⊚" "⊛" "∙" "∘"))
         (add-hook 'org-mode-hook (lambda () (org-bullets-mode 1)))
         )
     #+END_SRC

     #+RESULTS:

**** =org-attach-screenshot=

     #+BEGIN_SRC emacs-lisp
       (use-package org-attach-screenshot
         :diminish
         :after (org)
         :bind
         (("C-c S" . org-attach-screenshot))
         )
     #+END_SRC

**** Calendario visual: =calfw=

     Para configuración y =keybindings= se puede consultar  [[http://jameswilliams.be/blog/2016/01/11/Taming-Your-GCal.html][Taming Google Calendar With Org-Mode]]

     #+BEGIN_SRC emacs-lisp

       (use-package calfw
         :ensure t
         :bind ((""))
         :config
         (require 'calfw-org)
         )

     #+END_SRC

     #+RESULTS:


*** =python=

    #+BEGIN_SRC emacs-lisp
      (use-package pyenv-mode
        :ensure t
        :bind (("C-c v s" . pyenv-mode-set)
               ("C-c v u" . pyenv-mode-unset))
        :config
        (pyenv-mode)

        (add-hook 'projectile-switch-project-hook 'nanounanue/projectile-pyenv-mode-set)
        )
    #+END_SRC

    #+RESULTS:


*** =R=: [[https://ess.r-project.org/][Emacs Speaks Statistics]]


    #+BEGIN_SRC emacs-lisp

      (use-package ess
        :ensure t
        )

    #+END_SRC

    #+RESULTS:


*** =nginx=
    #+BEGIN_SRC emacs-lisp
      (use-package nginx-mode
        :ensure t)
    #+END_SRC

    #+RESULTS:


*** =docker=

    #+BEGIN_SRC emacs-lisp
      (use-package docker :ensure t)
      (use-package docker-tramp :ensure t)
      (use-package dockerfile-mode :ensure t)
    #+END_SRC

    #+RESULTS:

    Para usar =docker-tramp=

    #+BEGIN_EXAMPLE
    C-x C-f /docker:user@container:/path/to/file

    where
      user           is the user that you want to use (optional)
      container      is the id or name of the container
    #+END_EXAMPLE


**** Links relacionados

     [[https://github.com/fniessen/refcard-org-beamer][Refcard para org-beamer]]

     [[https://sam217pa.github.io/2016/09/13/from-helm-to-ivy/][From helm to ivy]]

     [[http://oremacs.com/2015/04/16/ivy-mode/][Descripción de ivy]]


*** markdown

    Keybindings en [[http://jblevins.org/projects/markdown-mode/][Markdown Mode for Emacs]]

    #+BEGIN_SRC emacs-lisp
      (use-package markdown-mode
        :ensure t
        :commands (markdown-mode gfm-mode)
        :mode (("README\\.md\\'" . gfm-mode)
               ("\\.md\\'" . markdown-mode)
               ("\\.markdown\\'" . markdown-mode))
        :init (setq markdown-command "multimarkdown"))
    #+END_SRC


** Blog

   Basado principalmente de [[http://heikkil.github.io/blog/2015/03/28/understanding-org-page/][Understanding org-page]] y del [[https://github.com/kelvinh/org-page/blob/master/doc/quick-guide.org][Quick guide to org-page]]

   #+BEGIN_SRC emacs-lisp
     (use-package org-page
       :ensure t
       :config
       (progn
         (setq op/repository-directory "~/proyectos/nanounanue.github.io")   ;; the repository location
         (setq op/site-domain "http://nanounanue.github.io")         ;; your domain
         ;;; the configuration below you should choose one, not both
         ;;(setq op/personal-disqus-shortname "your_disqus_shortname")    ;; your disqus commenting system
         ;;(setq op/personal-duoshuo-shortname "your_duoshuo_shortname")  ;; your duoshuo commenting system
         ;;(setq op/hashover-comments t)                                   ;; activate hashover self-hosted comment system
         (setq op/personal-avatar "https://avatars2.githubusercontent.com/u/494528?v=3&s=460")
         ;; for commenting; disabled for now
         ;;(setq op/personal-disqus-shortname "your_disqus_shortname")

         ;; analytics set up at ~/.emacs.secrets file
         ;;(setq op/personal-google-analytics-id "UA-NNNNNNNN-N")

         (setq op/personal-github-link "https://github.com/nanounanue")

         (setq op/site-main-title "nanounanue @ home")
         (setq op/site-sub-title "...")

         ;; set up my own theme since a sans option does not exist
         ;;(setq op/theme-root-directory "~/src/org-page/heikkil.github.io/themes")
         ;;(setq op/theme 'sans)  ; mdo is the default

         )
       )

     (use-package blog-admin
       :ensure t
       :defer t
       :commands blog-admin-start
       :init
       (progn
         ;; do your configuration here
         (setq blog-admin-backend-type 'org-page)
         (setq blog-admin-backend-path "~/proyectos/nanounanue.github.io")
         (setq blog-admin-backend-new-post-in-drafts t)
         (setq blog-admin-backend-new-post-with-same-name-dir t)
         (setq blog-admin-backend-org-page-drafts "_drafts") ;; directory to save draft
         ;;(setq blog-admin-backend-org-page-config-file "/path/to/org-page/config.el") ;; if nil init.el is used
         )
       )
   #+END_SRC

   #+RESULTS:
   : _drafts


** Misceláneo

*** =fancy-narrow=

    #+BEGIN_SRC emacs-lisp
      (use-package fancy-narrow
        :ensure t
        :diminish
        :config
        (fancy-narrow-mode)
        )
    #+END_SRC

    #+RESULTS:
    : t

*** =demo-it=

    Paquete para hacer demostraciones. Ver por ejemplo:

    - [[https://www.youtube.com/watch?v=WZVZXp-i7jQ][Demostration of demo-it]]
    - [[https://github.com/howardabrams/demo-it][Repositorio de demo-it]]

      #+BEGIN_SRC emacs-lisp
        (use-package demo-it
          :ensure t
          )
      #+END_SRC

      #+RESULTS:

*** =magit= y =github=

    #+BEGIN_SRC emacs-lisp
      (use-package magithub
        :disabled
        :after magit
        :ensure t
        :config
        (magithub-feature-autoinject t)
        (setq ghub-username "nanounanue")
        (setq ghub-token "856a54bca7d06abb31c0b3197c260da30e7c551d")
        )

      (use-package magit-gitflow
        :ensure t
        :after magit
        :disabled
        :init
        (progn
          (add-hook 'magit-mode-hook 'turn-on-magit-gitflow)  ;; Keybing: C-f en la ventana de magit
          )
        )
    #+END_SRC

    #+RESULTS:

*** =eshell=

    Puedes cambiar el tema de =eshell= tecleando =use-theme= en la consola
    (esto gracias a =eshell-git-prompt-use-theme=)

    #+BEGIN_SRC emacs-lisp
      (use-package eshell-git-prompt
        :config (eshell-git-prompt-use-theme 'robbyrussell))

      (use-package eshell-prompt-extras
        :config
        (progn
          (with-eval-after-load "esh-opt"
            (autoload 'epe-theme-lambda "eshell-prompt-extras")
            (setq eshell-highlight-prompt nil
                  eshell-prompt-function 'epe-theme-lambda))
          ))
    #+END_SRC

    #+RESULTS:
    : t

*** =csv=

    #+BEGIN_SRC emacs-lisp
      (use-package csv-nav
        :ensure t
        )

      (use-package csv-mode
        :ensure t
        :mode "\\.[PpTtCc][Ss][Vv]\\'"

        :config
        (progn
          (setq csv-separators '("," ";" "|" " " "\t"))
          )
        )
    #+END_SRC

    #+RESULTS:



*** =pdf-tools=

[[https://github.com/politza/pdf-tools][Github page]]

Para usr este paquete con  =org-mode=:

#+BEGIN_EXAMPLE
[[pdfview:~/Descargas/01688199.pdf::42][PDF Link]]
#+END_EXAMPLE

    #+BEGIN_SRC emacs-lisp
      (use-package org-pdfview
        :after (org)
        :ensure t
        )

      (use-package  pdf-tools
        :after (org)
        :ensure t
        :config
        (add-to-list 'org-file-apps
                     '("\\.pdf\\'" . (lambda (file link)
                                       (org-pdfview-open link))))
        (add-to-list 'org-file-apps
                     '("\\.pdf::\\([[:digit:]]+\\)\\'" . org-pdfview-open))

        (setq ess-pdf-viewer-pref 'emacsclient)
        )

      (pdf-tools-install)
    #+END_SRC

*** Ugly hacks

    #+BEGIN_SRC emacs-lisp
      (setq python-shell-prompt-detect-failure-warning nil)
    #+END_SRC

    #+RESULTS:

    El siguiente código parte la ventana verticalmente por /default/,
    (no me gusta que se parta horizontalmente)

    *NOTA*: No es necesario si ejecuta bien todo el proceso
    #+BEGIN_SRC emacs-lisp
      ;;(setq split-height-threshold nil)
      ;;(setq split-width-threshold 80)
    #+END_SRC

    #+RESULTS:
    : 80


** Funciones

   #+BEGIN_SRC emacs-lisp
   ;; Para comentarios en archivos de código
   ;; Tomado de https://www.emacswiki.org/emacs/AutoFillMode
   (defun nanounanue/comment-auto-fill ()
     (setq-local comment-auto-fill-only-comments t)
     (auto-fill-mode 1))


   (defun nanounanue/org-skip-subtree-if-priority (priority)
     "Ignora un subtree de la agenda si su PRIORITY es igual a priority.

             PRIORITY puede ser uno de los siguientes caracteres: ?A, ?B, or ?C."
     (let ((subtree-end (save-excursion (org-end-of-subtree t)))
           (pri-value (* 1000 (- org-lowest-priority priority)))
           (pri-current (org-get-priority (thing-at-point 'line t))))
       (if (= pri-value pri-current)
           subtree-end
         nil)))


   (defun nanounanue/projectile-pyenv-mode-set ()
     "Set pyenv version matching project name."
     (let ((project (projectile-project-name)))
       (if (member project (pyenv-mode-versions))
           (pyenv-mode-set project)
         (pyenv-mode-unset))))


   (setq nanounanue/keep-clock-running nil)

   (defun nanounanue/clock-in-to-next (kw)
     "Switch a task from TODO to NEXT when clocking in.
   Skips capture tasks, projects, and subprojects.
   Switch projects and subprojects from NEXT back to TODO"
     (when (not (and (boundp 'org-capture-mode) org-capture-mode))
       (cond
        ((and (member (org-get-todo-state) (list "TODO"))
            (nanounanue/is-task-p))
         "NEXT")
        ((and (member (org-get-todo-state) (list "NEXT"))
            (nanounanue/is-project-p))
         "TODO"))))

   (defun nanounanue/find-project-task ()
     "Move point to the parent (project) task if any"
     (save-restriction
       (widen)
       (let ((parent-task (save-excursion (org-back-to-heading 'invisible-ok) (point))))
         (while (org-up-heading-safe)
           (when (member (nth 2 (org-heading-components)) org-todo-keywords-1)
             (setq parent-task (point))))
         (goto-char parent-task)
         parent-task)))

   (defun nanounanue/punch-in (arg)
     "Start continuous clocking and set the default task to the
      selected task.  If no task is selected set the Organization task
      as the default task."
     (interactive "p")
     (setq nanounanue/keep-clock-running t)
     (if (equal major-mode 'org-agenda-mode)
         ;;
         ;; We're in the agenda
         ;;
         (let* ((marker (org-get-at-bol 'org-hd-marker))
                (tags (org-with-point-at marker (org-get-tags-at))))
           (if (and (eq arg 4) tags)
               (org-agenda-clock-in '(16))
             (nanounanue/clock-in-organization-task-as-default)))
       ;;
       ;; We are not in the agenda
       ;;
       (save-restriction
         (widen)
                                           ; Find the tags on the current task
         (if (and (equal major-mode 'org-mode) (not (org-before-first-heading-p)) (eq arg 4))
             (org-clock-in '(16))
           (nanounanue/clock-in-organization-task-as-default)))))

   (defun nanounanue/punch-out ()
     (interactive)
     (setq nanounanue/keep-clock-running nil)
     (when (org-clock-is-active)
       (org-clock-out))
     (org-agenda-remove-restriction-lock))


   (defvar nanounanue/insert-inactive-timestamp t)

   (defun nanounanue/toggle-insert-inactive-timestamp ()
     (interactive)
     (setq nanounanue/insert-inactive-timestamp (not nanounanue/insert-inactive-timestamp))
     (message "Heading timestamps are %s" (if nanounanue/insert-inactive-timestamp "ON" "OFF")))

   (defun nanounanue/insert-inactive-timestamp ()
     (interactive)
     (org-insert-time-stamp nil t t nil nil nil))

   (defun nanounanue/insert-heading-inactive-timestamp ()
     (save-excursion
       (when nanounanue/insert-inactive-timestamp
         (org-return)
         (org-cycle)
         (nanounanue/insert-inactive-timestamp))))

   (add-hook 'org-insert-heading-hook 'nanounanue/insert-heading-inactive-timestamp 'append)



   (defun nanounanue/clock-in-task-by-id (id)
     "Clock in a task by id"
     (org-with-point-at (org-id-find id 'marker)
       (org-clock-in nil)))

   (defun nanounanue/clock-in-last-task (arg)
     "Clock in the interrupted task if there is one
      Skip the default task and get the next one.
      A prefix arg forces clock in of the default task."
     (interactive "p")
     (let ((clock-in-to-task
            (cond
             ((eq arg 4) org-clock-default-task)
             ((and (org-clock-is-active)
                 (equal org-clock-default-task (cadr org-clock-history)))
              (caddr org-clock-history))
             ((org-clock-is-active) (cadr org-clock-history))
             ((equal org-clock-default-task (car org-clock-history)) (cadr org-clock-history))
             (t (car org-clock-history)))))
       (widen)
       (org-with-point-at clock-in-to-task
         (org-clock-in nil))))


   ;; Remove empty LOGBOOK drawers on clock out
   (defun nanounanue/remove-empty-drawer-on-clock-out ()
     (interactive)
     (save-excursion
       (beginning-of-line 0)
       (org-remove-empty-drawer-at "LOGBOOK" (point))))

   ;; The following line fails
   ;;(add-hook 'org-clock-out-hook 'nanounanue/remove-empty-drawer-on-clock-out 'append)


   ;; Refile settings
   ;; Exclude DONE state tasks from refile targets
   (defun nanounanue/verify-refile-target ()
     "Exclude todo keywords with a done state from refile targets"
     (not (member (nth 2 (org-heading-components)) org-done-keywords)))

   (setq org-refile-target-verify-function 'nanounanue/verify-refile-target)

   (defun nanounanue/is-project-p ()
     "Any task with a todo keyword subtask"
     (save-restriction
       (widen)
       (let ((has-subtask)
             (subtree-end (save-excursion (org-end-of-subtree t)))
             (is-a-task (member (nth 2 (org-heading-components)) org-todo-keywords-1)))
         (save-excursion
           (forward-line 1)
           (while (and (not has-subtask)
                       (< (point) subtree-end)
                       (re-search-forward "^\*+ " subtree-end t))
             (when (member (org-get-todo-state) org-todo-keywords-1)
               (setq has-subtask t))))
         (and is-a-task has-subtask))))

   (defun nanounanue/is-project-subtree-p ()
     "Any task with a todo keyword that is in a project subtree.
      Callers of this function already widen the buffer view."
     (let ((task (save-excursion (org-back-to-heading 'invisible-ok)
                                 (point))))
       (save-excursion
         (nanounanue/find-project-task)
         (if (equal (point) task)
             nil
           t))))

   (defun nanounanue/is-task-p ()
     "Any task with a todo keyword and no subtask"
     (save-restriction
       (widen)
       (let ((has-subtask)
             (subtree-end (save-excursion (org-end-of-subtree t)))
             (is-a-task (member (nth 2 (org-heading-components)) org-todo-keywords-1)))
         (save-excursion
           (forward-line 1)
           (while (and (not has-subtask)
                       (< (point) subtree-end)
                       (re-search-forward "^\*+ " subtree-end t))
             (when (member (org-get-todo-state) org-todo-keywords-1)
               (setq has-subtask t))))
         (and is-a-task (not has-subtask)))))

   (defun nanounanue/is-subproject-p ()
     "Any task which is a subtask of another project"
     (let ((is-subproject)
           (is-a-task (member (nth 2 (org-heading-components)) org-todo-keywords-1)))
       (save-excursion
         (while (and (not is-subproject) (org-up-heading-safe))
           (when (member (nth 2 (org-heading-components)) org-todo-keywords-1)
             (setq is-subproject t))))
       (and is-a-task is-subproject)))

   (defun nanounanue/list-sublevels-for-projects-indented ()
     "Set org-tags-match-list-sublevels so when restricted to a subtree we list all subtasks.
        This is normally used by skipping functions where this variable is already local to the agenda."
     (if (marker-buffer org-agenda-restrict-begin)
         (setq org-tags-match-list-sublevels 'indented)
       (setq org-tags-match-list-sublevels nil))
     nil)

   (defun nanounanue/list-sublevels-for-projects ()
     "Set org-tags-match-list-sublevels so when restricted to a subtree we list all subtasks.
        This is normally used by skipping functions where this variable is already local to the agenda."
     (if (marker-buffer org-agenda-restrict-begin)
         (setq org-tags-match-list-sublevels t)
       (setq org-tags-match-list-sublevels nil))
     nil)

   (defvar nanounanue/hide-scheduled-and-waiting-next-tasks t)

   (defun nanounanue/toggle-next-task-display ()
     (interactive)
     (setq nanounanue/hide-scheduled-and-waiting-next-tasks (not nanounanue/hide-scheduled-and-waiting-next-tasks))
     (when  (equal major-mode 'org-agenda-mode)
       (org-agenda-redo))
     (message "%s WAITING and SCHEDULED NEXT Tasks" (if nanounanue/hide-scheduled-and-waiting-next-tasks "Hide" "Show")))

   (defun nanounanue/skip-stuck-projects ()
     "Skip trees that are not stuck projects"
     (save-restriction
       (widen)
       (let ((next-headline (save-excursion (or (outline-next-heading) (point-max)))))
         (if (nanounanue/is-project-p)
             (let* ((subtree-end (save-excursion (org-end-of-subtree t)))
                    (has-next ))
               (save-excursion
                 (forward-line 1)
                 (while (and (not has-next) (< (point) subtree-end) (re-search-forward "^\\*+ NEXT " subtree-end t))
                   (unless (member "WAITING" (org-get-tags-at))
                     (setq has-next t))))
               (if has-next
                   nil
                 next-headline)) ; a stuck project, has subtasks but no next task
           nil))))

   (defun nanounanue/skip-non-stuck-projects ()
     "Skip trees that are not stuck projects"
     ;; (nanounanue/list-sublevels-for-projects-indented)
     (save-restriction
       (widen)
       (let ((next-headline (save-excursion (or (outline-next-heading) (point-max)))))
         (if (nanounanue/is-project-p)
             (let* ((subtree-end (save-excursion (org-end-of-subtree t)))
                    (has-next ))
               (save-excursion
                 (forward-line 1)
                 (while (and (not has-next) (< (point) subtree-end) (re-search-forward "^\\*+ NEXT " subtree-end t))
                   (unless (member "WAITING" (org-get-tags-at))
                     (setq has-next t))))
               (if has-next
                   next-headline
                 nil)) ; a stuck project, has subtasks but no next task
           next-headline))))

   (defun nanounanue/skip-non-projects ()
     "Skip trees that are not projects"
     ;; (nanounanue/list-sublevels-for-projects-indented)
     (if (save-excursion (nanounanue/skip-non-stuck-projects))
         (save-restriction
           (widen)
           (let ((subtree-end (save-excursion (org-end-of-subtree t))))
             (cond
              ((nanounanue/is-project-p)
               nil)
              ((and (nanounanue/is-project-subtree-p) (not (nanounanue/is-task-p)))
               nil)
              (t
               subtree-end))))
       (save-excursion (org-end-of-subtree t))))

   (defun nanounanue/skip-non-tasks ()
     "Show non-project tasks.
      Skip project and sub-project tasks, habits, and project related tasks."
     (save-restriction
       (widen)
       (let ((next-headline (save-excursion (or (outline-next-heading) (point-max)))))
         (cond
          ((nanounanue/is-task-p)
           nil)
          (t
           next-headline)))))

   (defun nanounanue/skip-project-trees-and-habits ()
     "Skip trees that are projects"
     (save-restriction
       (widen)
       (let ((subtree-end (save-excursion (org-end-of-subtree t))))
         (cond
          ((nanounanue/is-project-p)
           subtree-end)
          ((org-is-habit-p)
           subtree-end)
          (t
           nil)))))

   (defun nanounanue/skip-projects-and-habits-and-single-tasks ()
     "Skip trees that are projects, tasks that are habits, single non-project tasks"
     (save-restriction
       (widen)
       (let ((next-headline (save-excursion (or (outline-next-heading) (point-max)))))
         (cond
          ((org-is-habit-p)
           next-headline)
          ((and nanounanue/hide-scheduled-and-waiting-next-tasks
                (member "WAITING" (org-get-tags-at)))
           next-headline)
          ((nanounanue/is-project-p)
           next-headline)
          ((and (nanounanue/is-task-p) (not (nanounanue/is-project-subtree-p)))
           next-headline)
          (t
           nil)))))

   (defun nanounanue/skip-project-tasks-maybe ()
     "Show tasks related to the current restriction.
      When restricted to a project, skip project and sub project tasks, habits, NEXT tasks, and loose tasks.
      When not restricted, skip project and sub-project tasks, habits, and project related tasks."
     (save-restriction
       (widen)
       (let* ((subtree-end (save-excursion (org-end-of-subtree t)))
              (next-headline (save-excursion (or (outline-next-heading) (point-max))))
              (limit-to-project (marker-buffer org-agenda-restrict-begin)))
         (cond
          ((nanounanue/is-project-p)
           next-headline)
          ((org-is-habit-p)
           subtree-end)
          ((and (not limit-to-project)
                (nanounanue/is-project-subtree-p))
           subtree-end)
          ((and limit-to-project
                (nanounanue/is-project-subtree-p)
                (member (org-get-todo-state) (list "NEXT")))
           subtree-end)
          (t
           nil)))))

   (defun nanounanue/skip-project-tasks ()
     "Show non-project tasks.
      Skip project and sub-project tasks, habits, and project related tasks."
     (save-restriction
       (widen)
       (let* ((subtree-end (save-excursion (org-end-of-subtree t))))
         (cond
          ((nanounanue/is-project-p)
           subtree-end)
          ((org-is-habit-p)
           subtree-end)
          ((nanounanue/is-project-subtree-p)
           subtree-end)
          (t
           nil)))))

   (defun nanounanue/skip-non-project-tasks ()
     "Show project tasks.
      Skip project and sub-project tasks, habits, and loose non-project tasks."
     (save-restriction
       (widen)
       (let* ((subtree-end (save-excursion (org-end-of-subtree t)))
              (next-headline (save-excursion (or (outline-next-heading) (point-max)))))
         (cond
          ((nanounanue/is-project-p)
           next-headline)
          ((org-is-habit-p)
           subtree-end)
          ((and (nanounanue/is-project-subtree-p)
                (member (org-get-todo-state) (list "NEXT")))
           subtree-end)
          ((not (nanounanue/is-project-subtree-p))
           subtree-end)
          (t
           nil)))))

   (defun nanounanue/skip-projects-and-habits ()
     "Skip trees that are projects and tasks that are habits"
     (save-restriction
       (widen)
       (let ((subtree-end (save-excursion (org-end-of-subtree t))))
         (cond
          ((nanounanue/is-project-p)
           subtree-end)
          ((org-is-habit-p)
           subtree-end)
          (t
           nil)))))

   (defun nanounanue/skip-non-subprojects ()
     "Skip trees that are not projects"
     (let ((next-headline (save-excursion (outline-next-heading))))
       (if (nanounanue/is-subproject-p)
           nil
         next-headline)))
   #+END_SRC

   #+RESULTS:
   : nanounanue/clock-in-last-task


** Server

   Inicializamos el server

   #+BEGIN_SRC emacs-lisp
   (require 'server)
   (if (not (server-running-p)) (server-start))
   #+END_SRC

   #+RESULTS:


* Global Keybindings



#+BEGIN_SRC emacs-lisp
(global-set-key (kbd "<f8>") 'org-cycle-agenda-files)
(global-set-key (kbd "<f9> b") 'bbdb)
(global-set-key (kbd "<f9> c") 'calendar)
(global-set-key (kbd "<f9> f") 'boxquote-insert-file)

(global-set-key (kbd "<f9> I") 'nanounanue/punch-in)
(global-set-key (kbd "<f9> O") 'nanounanue/punch-out)

(global-set-key (kbd "<f9> t") 'nanounanue/insert-inactive-timestamp)
(global-set-key (kbd "<f9> T") 'nanounanue/toggle-insert-inactive-timestamp)

(global-set-key (kbd "<f9> SPC") 'nanounanue/clock-in-last-task)

(global-set-key (kbd "<f11>") 'org-clock-goto)
(global-set-key (kbd "C-<f11>") 'org-clock-in)
#+END_SRC

#+RESULTS:
: org-clock-in

* Preload
  :PROPERTIES:
  :header-args:emacs-lisp: :tangle ~/.emacs.d/personal/preload/init.el
  :END:

  #+BEGIN_SRC emacs-lisp
    ;; Cambia la fuente de GNu/Emacs
    (setq default-frame-alist '((font . "Source Code Pro-11")))
  #+END_SRC

  #+RESULTS:
  : ((font . Source Code Pro-11))
