#+TITLE: Mi Configuración de GNU EMACS
#+AUTHOR: Adolfo De Unánue
#+EMAIL: nanounanue@gmail.com

* Intro
  :PROPERTIES:
  :header-args:emacs-lisp: :tangle ~/.emacs.d/personal/nano-emacs.el
  :END:


  Mi configuración de emacs está en este archivo.
  Por supuesto, nunca está estable, siempre estoy agregando y probando cosas
  nuevas que me hagan la vida más fácil y divertida.

  *NOTA*: En esta encarnación, esta configuración depende de [[https://github.com/bbatsov/prelude][emacs-prelude]]


** Configuración de paquetes

*** =use-package=

    Esto hará que todo sea más ordenado.

    #+BEGIN_SRC emacs-lisp
      (unless (package-installed-p 'use-package)
        (package-refresh-contents)
        (package-install 'use-package))
      (setq use-package-always-ensure t)
    #+END_SRC

    #+RESULTS:
    : t


*** Más paquetes


** Interfaz

*** Cosas a quitar

    #+BEGIN_SRC emacs-lisp
      (setq prelude-guru nil)
    #+END_SRC

    #+RESULTS:

*** =all-the-icons=

    #+BEGIN_SRC emacs-lisp
      (use-package all-the-icons
        :config
        (use-package all-the-icons-dired
          :config
          (add-hook 'dired-mode-hook 'all-the-icons-dired-mode)
          )
        )
    #+END_SRC

    #+RESULTS:
    : t

*** =gitter=

    Muestra los cambios en archivos controlados por =git=

    #+BEGIN_SRC emacs-lisp
      (use-package git-gutter+
        :diminish
        :defer t
        :config
        (global-git-gutter+-mode)
        )
    #+END_SRC

    #+RESULTS:

*** Símbolos (=pretty-mode=)

    #+BEGIN_SRC emacs-lisp
      (use-package pretty-mode
        :ensure t
        :config
        (global-pretty-mode t)

        (pretty-deactivate-groups
         '(:equality :ordering :ordering-double :ordering-triple
                     :arrows :arrows-twoheaded :punctuation
                     :logic :sets))

        (pretty-activate-groups
         '(:sub-and-superscripts :greek :arithmetic-nary :parentheses
                                 :types :arrows-tails  :arrows-tails-double
                                 :logic :sets :equality :ordering
                                 :arrows :arrows-twoheaded ))
        )
    #+END_SRC

    #+RESULTS:
    : t

    Además activamos otros símbolos en =prettify-symbols-alist=

    #+BEGIN_SRC emacs-lisp
      (add-hook
       'prog-mode-hook
       (lambda ()
         (setq prettify-symbols-alist
               '(;; Syntax
                 ("in" .       #x2208)
                 ("not in" .   #x2209)
                 ("not" .      #x2757)
                 ("return" .   #x27fc)
                 ("yield" .    #x27fb)
                 ("for" .      #x2200)
                 ("function" . ?λ)
                 ("<>" . ?≠)
                 ("!=" . ?≠)
                 ("exists" . ?Ǝ)
                 ("in" . ?∈)
                 ("sum" . ?Ʃ)
                 ("complex numbers" . ?ℂ)
                 ("integer numbers" . ?ℤ)
                 ("natural numbers" . ?ℕ)
                 ;; Base Types
                 ("int" .      #x2124)
                 ("float" .    #x211d)
                 ("str" .      #x1d54a)
                 ("True" .     #x1d54b)
                 ("False" .    #x1d53d)
                 ;; python
                 ("Dict" .     #x1d507)
                 ("List" .     #x2112)
                 ("Tuple" .    #x2a02)
                 ("Set" .      #x2126)
                 ("Iterable" . #x1d50a)
                 ("Any" .      #x2754)
                 ("Union" .    #x22c3)))))
      (global-prettify-symbols-mode t)

    #+END_SRC

    #+RESULTS:
    : t

*** =avy=

    #+BEGIN_SRC emacs-lisp
      (use-package avy
        :ensure t
        :commands avy-goto-word-1 avy-goto-char-1 avy-goto-line avy-goto-char-timer
        :bind (("s-." . avy-goto-word-or-subword-1)
               ("s-," . avy-goto-char)
               ("C-l"     . avy-goto-word-1))
        )
    #+END_SRC

    #+RESULTS:

*** Acomodo /agresivo/

    #+BEGIN_SRC emacs-lisp
      ;; Aggressive-fill
      (use-package aggressive-fill-paragraph
        :ensure t
        :disabled
        :config
        (afp-setup-recommended-hooks)
        ;; to enable the minor mode in all places where it might be useful. Alternatively use
        ;;(add-hook '[major-mode-hook] #'aggressive-fill-paragraph-mode)
        )

      ;; Aggressive-indent
      (use-package aggressive-indent
        :ensure t
        :config
        ;; (global-aggressive-indent-mode 1)
        (add-to-list 'aggressive-indent-excluded-modes 'html-mode)
        (add-hook 'emacs-lisp-mode-hook #'aggressive-indent-mode)
        (add-hook 'clojure-mode-hook #'aggressive-indent-mode)
        (add-hook 'ruby-mode-hook #'aggressive-indent-mode)
        (add-hook 'css-mode-hook #'aggressive-indent-mode)
        )
    #+END_SRC

    #+RESULTS:
    : t

*** Edición multi-línea

    [[http://emacsrocks.com/e13.html][Ejemplo de uso]]

    #+BEGIN_SRC emacs-lisp
      ;; Edición de múltiples líneas
      (use-package multiple-cursors
        :diminish multiple-cursors-mode
        :defer t
        :init
        (global-set-key (kbd "C->") 'mc/mark-next-like-this)
        (global-set-key (kbd "C-<") 'mc/mark-previous-like-this)
        (global-set-key (kbd "C-c C-<") 'mc/mark-all-like-this)
        )
    #+END_SRC

    #+RESULTS:

*** =undo-tree=

    Recorre el /buffer/ mostrando un árbol

    #+BEGIN_SRC emacs-lisp
      (use-package undo-tree  ;; C-x u
        :ensure t
        :config
        (progn
          (global-undo-tree-mode)
          (setq undo-tree-visualizer-timestamps t))
        :diminish undo-tree-mode
        )
    #+END_SRC

    #+RESULTS:
    : t

*** =swiper= / =ivy= / =counsel=

    [[https://github.com/abo-abo/swiper][swiper]] es una biblioteca similar a =helm=  pero más ligera


    #+BEGIN_SRC emacs-lisp
      ;; it looks like counsel is a requirement for swiper
      (use-package counsel
        :ensure t
        )

      (use-package swiper
        :init (ivy-mode 1)
        :ensure try
        :bind (
               ("C-s" . swiper)
               ("C-r" . swiper)
               ("M-x" . counsel-M-x)
               ("C-x C-f" . counsel-find-file)
               ("C-c C-r" . ivy-resume)
               ("<f6>" . ivy-resume)
               ("C-c h m" . woman)
               ("C-x b" . ivy-switch-buffer)
               ("C-c u" . swiper-all)
               ("<f1> f" . counsel-describe-function)
               ("<f1> v" . counsel-describe-variable)
               ("<f1> l" . counsel-load-library)
               ("<f2> i" . counsel-info-lookup-symbol)
               ("<f2> u" . counsel-unicode-char)
               ("C-c g" . counsel-git)
               ("C-c j" . counsel-git-grep)
               ("C-c k" . counsel-ag)
               ("C-x l" . counsel-locate)
               ("C-S-o" . counsel-rhythmbox)
               )
        :config
        (setq ivy-use-virtual-buffers t
              ivy-count-format "%d/%d ")
        (setq projectile-completion-system 'ivy)                   ;; Habilitamos ivy en projectile
        (setq magit-completing-read-function 'ivy-completing-read) ;; Habilitamos ivy en magit

        ;; Tomado de scimax
        (ivy-set-actions
         t
         '(("i" (lambda (x) (with-ivy-window
                              (insert x))) "insert candidate")
           (" " (lambda (x) (ivy-resume)) "resume")
           ("?" (lambda (x)
                  (interactive)
                  (describe-keymap ivy-minibuffer-map)) "Describe keys")))

        ;; ** Acciones para counsel-find-file
        ;; Tomado de scimax
        (ivy-add-actions
         'counsel-find-file
         '(("a" (lambda (x)
                  (unless (memq major-mode '(mu4e-compose-mode message-mode))
                    (compose-mail))
                  (mml-attach-file x)) "Attach to email")
           ("c" (lambda (x) (kill-new (f-relative x))) "Copy relative path")
           ("4" (lambda (x) (find-file-other-window x)) "Open in new window")
           ("5" (lambda (x) (find-file-other-frame x)) "Open in new frame")
           ("C" (lambda (x) (kill-new x)) "Copy absolute path")
           ("d" (lambda (x) (dired x)) "Open in dired")
           ("D" (lambda (x) (delete-file x)) "Delete file")
           ("e" (lambda (x) (shell-command (format "open %s" x)))
            "Open in external program")
           ("f" (lambda (x)
                  "Open X in another frame."
                  (find-file-other-frame x))
            "Open in new frame")
           ("p" (lambda (path)
                  (with-ivy-window
                    (insert (f-relative path))))
            "Insert relative path")
           ("P" (lambda (path)
                  (with-ivy-window
                    (insert path)))
            "Insert absolute path")
           ("l" (lambda (path)
                  "Insert org-link with relative path"
                  (with-ivy-window
                    (insert (format "[[./%s]]" (f-relative path)))))
            "Insert org-link (rel. path)")
           ("L" (lambda (path)
                  "Insert org-link with absolute path"
                  (with-ivy-window
                    (insert (format "[[%s]]" path))))
            "Insert org-link (abs. path)")
           ("r" (lambda (path)
                  (rename-file path (read-string "New name: ")))
            "Rename")))
        )

      (use-package ivy-hydra
        :ensure t
        )

      (use-package counsel-projectile
        :ensure t
        :after counsel
        :config
        (counsel-projectile-on)
        )
    #+END_SRC

    #+RESULTS:
    : t


** Major modes

*** =org-mode=

    Una de las grandes ventajas de GNU/Emacs es =org-mode=


**** /Embellecedor/

     #+BEGIN_SRC emacs-lisp
       (use-package org-beautify-theme
         :ensure t)

     #+END_SRC

     #+RESULTS:

**** Cuerpo principal

     #+BEGIN_SRC emacs-lisp
       (use-package org
         :ensure t
         :mode ("\\.org\\'" . org-mode)
         :bind (("C-c l" . org-store-link)
                ("C-c c" . org-capture)
                ("C-c a" . org-agenda)
                ("C-c b" . org-iswitchb)
                ("C-c C-w" . org-refile)
                ("C-c C-v t" . org-babel-tangle)
                ("C-c C-v f" . org-babel-tangle-file)
                ("C-c j" . org-clock-goto)
                ("C-c C-x C-o" . org-clock-out)
                )

         :init
         (add-hook 'org-babel-after-execute-hook 'org-display-inline-images)
         (add-hook 'org-mode-hook 'org-display-inline-images)
         (add-hook 'org-mode-hook 'org-babel-result-hide-all)
         (add-hook 'org-mode-hook 'turn-on-auto-fill)

         :config
         (progn
           (setq org-directory "~/org")

           (setq org-use-speed-commands t)

           (add-to-list 'org-speed-commands-user (cons "P" 'org-set-property))
           (add-to-list 'org-speed-commands-user (cons "d" 'org-deadline))

           ;; Mark a subtree
           (add-to-list 'org-speed-commands-user (cons "m" 'org-mark-subtree))

           ;; Widen
           (add-to-list 'org-speed-commands-user (cons "S" 'widen))

           ;; kill a subtree
           (add-to-list 'org-speed-commands-user (cons "k" (lambda ()
                                                             (org-mark-subtree)
                                                             (kill-region
                                                              (region-beginning)
                                                              (region-end)))))

           ;; Jump to headline
           (add-to-list 'org-speed-commands-user
                        (cons "q" (lambda ()
                                    (avy-with avy-goto-line
                                      (avy--generic-jump "^\\*+" nil avy-style)))))


           ;; Enable pretty entities - shows e.g. α β γ as UTF-8 characters.
           (setq org-pretty-entities t)
           ;; Ensure native syntax highlighting is used for inline source blocks in org files
           (setq org-src-fontify-natively t)
           (setq org-src-tab-acts-natively t)

           (setq org-hide-emphasis-markers t)
           ;; I can display inline images. Set them to have a maximum size so large images don't fill the screen.
           (setq org-image-actual-width 800)
           (setq org-ellipsis "⤵");; ⤵ ≫ ⚡⚡⚡

           ;; make available "org-bullet-face" such that I can control the font size individually
           (setq org-bullets-face-name (quote org-bullet-face))

           ;; Agenda

           ;; record time I finished a task when I change it to DONE
           (setq org-log-done 'time)

           ;; I don't want to see things that are done. turn that off here.
           ;; http://orgmode.org/manual/Global-TODO-list.html#Global-TODO-list
           (setq org-agenda-skip-scheduled-if-done t)
           (setq org-agenda-skip-deadline-if-done t)
           (setq org-agenda-skip-timestamp-if-done t)
           (setq org-agenda-todo-ignore-scheduled t)
           (setq org-agenda-todo-ignore-deadlines t)
           (setq org-agenda-todo-ignore-timestamp t)
           (setq org-agenda-todo-ignore-with-date t)
           (setq org-agenda-start-on-weekday nil) ;; start on current day

           (setq org-upcoming-deadline '(:foreground "blue" :weight bold))

           ;; use timestamps in date-trees. for the journal
           (setq org-datetree-add-timestamp 'active)
           (setq org-agenda-files (quote ("~/org"
                                          "~/org/datank.org"
                                          "~/org/dsapp.org"
                                          "~/org/gasolinerias.org"
                                          "~/org/ligamx.org"
                                          "~/org/vigilamos.org"
                                          "~/org/personal.org"
                                          "~/org/proyectos.org"
                                          )))


           (setq org-agenda-custom-commands
                 '(("w" "Weekly Review"
                    ( ;; deadlines
                     (tags-todo "+DEADLINE<=\"<today>\""
                                ((org-agenda-overriding-header "Late Deadlines")))
                     ;; scheduled  past due
                     (tags-todo "+SCHEDULED<=\"<today>\""
                                ((org-agenda-overriding-header "Late Scheduled")))

                     ;; now the agenda
                     (agenda ""
                             ((org-agenda-overriding-header "weekly agenda")
                              (org-agenda-ndays 7)
                              (org-agenda-tags-todo-honor-ignore-options t)
                              (org-agenda-todo-ignore-scheduled nil)
                              (org-agenda-todo-ignore-deadlines nil)
                              (org-deadline-warning-days 0)))
                     ;; and last a global todo list
                     (todo "TODO")))
                   ("d" "Agenda diaria"
                    ((tags "PRIORIY=\"A\""
                           ((org-agenda-skip-function '(org-agenda-skip-entry-if 'todo 'done))
                            (org-agenda-overriding-header "Tasks de alta prioridad sin terminar:")))
                     (agenda "" ((org-agenda-ndays 1)))
                     (alltodo ""
                              ((org-agendaskip-function
                                '(or (nanounanue/org-skip-subtree-if-priority ?A)
                                    (org-agenda-skip-if nil '(scheduled deadline))))
                               (org-agenda-overriding-header "ALL tasks de prioridad normal:"))))
                    )
                   )
                 )

           ;; Refile
           (setq org-default-notes-file "~/org/refile.org")

           ;; Capture templates for: TODO tasks, Notes, appointments, phone calls, meetings, and org-protocol
           (setq org-capture-templates
                 (quote (("t" "todo" entry (file "~/org/refile.org")
                          "* ▶ TODO %?\n%U\n%a\n" :clock-in t :clock-resume t)
                         ("r" "respond" entry (file "~/org/refile.org")
                          "* ★ NEXT Respond to %:from on %:subject\nSCHEDULED: %t\n%U\n%a\n" :clock-in t :clock-resume t )
                         ("n" "note" entry (file "~/org/refile.org")
                          "* 🗒 %?:NOTE\n%U\n%a\n" :clock-in t :clock-resume t)
                         ("j" "Journal" entry (file+datetree "~/org/diary.org")
                          "* %?\n%U\n" :clock-in t :clock-resume t)
                         ("i" "idea" entry (file+headline "~/org/ideas.org" "Someday/Maybe")
                          "💡 IDEA %?\nAgregada: %U\n" :prepend t :kill-buffer )
                         ("m" "Meeting" entry (file "~/org/refile.org")
                          "* ⛹ MEETING with %? :MEETING:\n%U" :clock-in t :clock-resume t)
                         )))

           ;; Targets include this file and any file contributing to the agenda - up to 9 levels deep
           (setq org-refile-targets (quote ((nil :maxlevel . 9)
                                            (org-agenda-files :maxlevel . 9))))

           (setq org-todo-keywords '(
                                     (sequence
                                      "💡 IDEA(i)"
                                      "▶ TODO(t)"
                                      "🍽 INPROGRESS(p)"
                                      "★ NEXT(n)" "|"
                                      "✔ DONE(d)")
                                     (sequence "⚑ WAITING(w@/!)" "🚪 HOLD(h@/!)" "|")
                                     (sequence "|" "✘ CANCELLED(c@/!)"
                                               "SOMEDAY(f)"
                                               "☎ PHONE(z)" "⛹ MEETING(x)")))


           (setq org-todo-keyword-faces
                 (quote (
                         ("💡 IDEA" :foreground "CadetBlue2" :weight bold)
                         ("▶ TODO" :foreground "red" :weight bold)
                         ("🍽 INPROGRESS" :foreground "OrangeRed" :weight bold)
                         ("★ NEXT  :foreground" "blue" :weight bold)
                         ("✔ DONE" :foreground "forest green" :weight bold)
                         ("⚑ WAITING" :foreground "orange" :weight bold)
                         ("🚪 HOLD" :foreground "magenta" :weight bold)
                         ("✘ CANCELLED" :foreground "IndianRed1" :weight bold)
                         ("☎ PHONE" :foreground "forest green" :weight bold)
                         ("⛹ MEETING" :foreground "LimeGreen" :weight bold)
                         )))



           (setq org-todo-state-tags-triggers
                 (quote (("✘ CANCELLED" ("✘ CANCELLED" . t))
                         ("⚑ WAITING" ("⚑ WAITING" . t))
                         ("🚪 HOLD" ("⚑ WAITING") ("🚪 HOLD" . t))
                         (done ("⚑ WAITING") ("🚪 HOLD"))
                         ("▶ TODO" ("⚑ WAITING") ("✘ CANCELLED") ("🚪 HOLD"))
                         ("★ NEXT" ("⚑ WAITING") ("✘ CANCELLED") ("🚪 HOLD"))
                         ("✔ DONE" ("⚑ WAITING") ("✘ CANCELLED") ("🚪 HOLD"))
                         )
                        )
                 )

           ;; Bloques
           ;; * Block templates
           ;; add <p for python expansion
           (add-to-list 'org-structure-template-alist
                        '("p" "#+BEGIN_SRC python :results output org drawer\n?\n#+END_SRC"
                          "<src lang=\"python\">\n?\n</src>"))

           ;; add <por for python expansion with raw output
           (add-to-list 'org-structure-template-alist
                        '("por" "#+BEGIN_SRC python :results output raw\n?\n#+END_SRC"
                          "<src lang=\"python\">\n?\n</src>"))

           ;; add <pv for python expansion with value
           (add-to-list 'org-structure-template-alist
                        '("pv" "#+BEGIN_SRC python :results value\n?\n#+END_SRC"
                          "<src lang=\"python\">\n?\n</src>"))

           ;; add <el for emacs-lisp expansion
           (add-to-list 'org-structure-template-alist
                        '("el" "#+BEGIN_SRC emacs-lisp\n?\n#+END_SRC"
                          "<src lang=\"emacs-lisp\">\n?\n</src>"))

           (add-to-list 'org-structure-template-alist
                        '("ell" "#+BEGIN_SRC emacs-lisp :lexical t\n?\n#+END_SRC"
                          "<src lang=\"emacs-lisp\">\n?\n</src>"))

           ;; add <sh for shell
           (add-to-list 'org-structure-template-alist
                        '("sh" "#+BEGIN_SRC sh\n?\n#+END_SRC"
                          "<src lang=\"shell\">\n?\n</src>"))

           (add-to-list 'org-structure-template-alist
                        '("lh" "#+latex_header: " ""))

           (add-to-list 'org-structure-template-alist
                        '("lc" "#+latex_class: " ""))

           (add-to-list 'org-structure-template-alist
                        '("lco" "#+latex_class_options: " ""))

           (add-to-list 'org-structure-template-alist
                        '("ao" "#+attr_org: " ""))

           (add-to-list 'org-structure-template-alist
                        '("al" "#+attr_latex: " ""))

           (add-to-list 'org-structure-template-alist
                        '("ca" "#+caption: " ""))

           (add-to-list 'org-structure-template-alist
                        '("tn" "#+tblname: " ""))

           (add-to-list 'org-structure-template-alist
                        '("n" "#+name: " ""))

           (add-to-list 'org-structure-template-alist
                        '("o" "#+options: " ""))

           (add-to-list 'org-structure-template-alist
                        '("ti" "#+title: " ""))


           ;; Org-babel


           ;; No preguntar para confirmar la evaluación
           (setq org-confirm-babel-evaluate nil)

           ;; O en la exportación
           (setq org-export-babel-evaluate nil)

           (setq org-confirm-elisp-link-function nil)
           (setq org-confirm-shell-link-function nil)

           ;; Paths a ditaa y plantuml
           (setq org-ditaa-jar-path "~/software/org-libs/ditaa.jar")
           (setq org-plantuml-jar-path "~/software/org-libs/plantuml.jar")


           (require 'ob-clojure)
           (setq org-babel-clojure-backend 'cider)
           (require 'cider)

           ;;(require 'ob-shell)
           ;;(require 'ob-R)
           ;;(require 'ob-awk)
           ;;(require 'ob-latex)
           (require 'ob-emacs-lisp)
           (require 'ob-ipython)
           ;;(require 'ob-stan)
           ;;(require 'ob-ruby)
           ;;(require 'ob-dot)
           ;;(require 'ob-scala)
           ;;(require 'ob-plantuml)
           ;;(require 'ob-ditaa)
           ;;(require 'ob-lisp)

           (org-babel-do-load-languages
            'org-babel-load-languages
            '(

              (shell      . t)
              ;; (R          . t)
              (awk        . t)
              (sed        . t)
              (org        . t)
              (latex      . t)
              (emacs-lisp . t)
              (clojure    . t)
              (stan       . t)
              (ipython    . t)
              (ruby       . t)
              (dot        . t)
              (scala      . t)
              (sqlite     . t)
              (sql        . t)
              (ditaa      . t)
              (plantuml   . t)
              (mongo      . t)
              (cypher     . t)
              (redis      . t)
              (blockdiag  . t)
              )
            )

           ;; LaTeX
           (setq org-export-latex-listings 'minted)
           (setq org-export-latex-minted-options
                 '(("frame" "lines")
                   ("fontsize" "\\scriptsize")
                   ("linenos" "")
                   ))
           (setq org-latex-to-pdf-process
                 '("latexmk -xelatex='xelatex --shell-escape -interaction nonstopmode' -f  %f")) ;; for multiple passes


           (defun ivy-insert-org-entity ()
             "Insert an org-entity using ivy."
             (interactive)
             (ivy-read "Entity: " (loop for element in (append org-entities org-entities-user)
                                        when (not (stringp element))
                                        collect
                                        (cons
                                         (format "%10s | %s | %s | %s"
                                                 (car element) ;name
                                                 (nth 1 element) ; latex
                                                 (nth 3 element) ; html
                                                 (nth 6 element)) ;utf-8
                                         element))
                       :require-match t
                       :action '(1
                                 ("u" (lambda (element) (insert (nth 6 (cdr element)))) "utf-8")
                                 ("o" (lambda (element) (insert "\\" (cadr element))) "org-entity")
                                 ("l" (lambda (element) (insert (nth 1 (cdr element)))) "latex")
                                 ("h" (lambda (element) (insert (nth 3 (cdr element)))) "html"))))


           ;; * ivy navigation
           (defun ivy-org-jump-to-visible-headline ()
             "Jump to visible headline in the buffer."
             (interactive)
             (org-mark-ring-push)
             (avy-with avy-goto-line (avy--generic-jump "^\\*+" nil avy-style)))


           (defun ivy-jump-to-visible-sentence ()
             "Jump to visible sentence in the buffer."
             (interactive)
             (org-mark-ring-push)
             (avy-with avy-goto-line (avy--generic-jump (sentence-end) nil avy-style))
             (forward-sentence))


           (defun ivy-org-jump-to-heading ()
             "Jump to heading in the current buffer."
             (interactive)
             (let ((headlines '()))
               (save-excursion
                 (goto-char (point-min))
                 (while (re-search-forward
                         ;; this matches org headings in elisp too.
                         "^\\(;; \\)?\\(\\*+\\)\\(?: +\\(.*?\\)\\)?[    ]*$"  nil t)
                   (cl-pushnew (list
                                (format "%-80s"
                                        (match-string 0))
                                (cons 'position (match-beginning 0)))
                               headlines)))
               (ivy-read "Headline: "
                         (reverse headlines)
                         :action (lambda (candidate)
                                   (org-mark-ring-push)
                                   (goto-char (cdr (assoc 'position candidate)))
                                   (outline-show-entry)))))


           (defun ivy-org-jump-to-agenda-heading ()
             "Jump to a heading in an agenda file."
             (interactive)
             (let ((headlines '()))
               ;; these files should be open already since they are agenda files.
               (loop for file in (org-agenda-files) do
                     (with-current-buffer (find-file-noselect file)
                       (save-excursion
                         (goto-char (point-min))
                         (while (re-search-forward org-heading-regexp nil t)
                           (cl-pushnew (list
                                        (format "%-80s (%s)"
                                                (match-string 0)
                                                (file-name-nondirectory file))
                                        :file file
                                        :position (match-beginning 0))
                                       headlines)))))
               (ivy-read "Headline: "
                         (reverse headlines)
                         :action (lambda (candidate)
                                   (org-mark-ring-push)
                                   (find-file (plist-get (cdr candidate) :file))
                                   (goto-char (plist-get (cdr candidate) :position))
                                   (outline-show-entry)))))


           (defun ivy-org-jump-to-heading-in-files (files &optional fontify)
             "Jump to org heading in FILES.
       Optional FONTIFY colors the headlines. It might slow things down
       a lot with large numbers of org-files or long org-files. This
       function does not open the files."
             (let ((headlines '()))
               (loop for file in files do
                     (with-temp-buffer
                       (insert-file-contents file)
                       (when fontify
                         (org-mode)
                         (font-lock-fontify-buffer))
                       (goto-char (point-min))
                       (while (re-search-forward org-heading-regexp nil t)
                         (cl-pushnew (list
                                      (format "%-80s (%s)"
                                              (match-string 0)
                                              (file-name-nondirectory file))
                                      :file file
                                      :position (match-beginning 0))
                                     headlines))))
               (ivy-read "Headline: "
                         (reverse headlines)
                         :action (lambda (candidate)
                                   (org-mark-ring-push)
                                   (find-file (plist-get (cdr candidate) :file))
                                   (goto-char (plist-get (cdr candidate) :position))
                                   (outline-show-entry)))))


           (defun ivy-org-jump-to-heading-in-directory (&optional recursive)
             "Jump to heading in an org file in the current directory.
       Use a prefix arg to make it RECURSIVE.
       Use a double prefix to make it recursive and fontified."
             (interactive "P")
             (let ((fontify nil))
               (when (equal recursive '(16))
                 (setq fontify t))
               (ivy-org-jump-to-heading-in-files
                (f-entries "."
                           (lambda (f)
                             (and
                              (f-ext? f "org")
                              (not (s-contains? "#" f))))
                           recursive)
                fontify)))


           (defun ivy-org-jump-to-project-headline (&optional fontify)
             "Jump to a headline in an org-file in the current project.
       The project is defined by projectile. Use a prefix arg FONTIFY
       for colored headlines."
             (interactive "P")
             (ivy-org-jump-to-heading-in-files
              (mapcar
               (lambda (f) (expand-file-name f (projectile-project-root)))
               (-filter (lambda (f)
                          (and
                           (f-ext? f "org")
                           (not (s-contains? "#" f))))
                        (projectile-current-project-files)))
              fontify))


           (defun ivy-org-jump-to-open-headline (&optional fontify)
             "Jump to a headline in an open org-file.
       Use a prefix arg FONTIFY for colored headlines."
             (interactive "P")
             (ivy-org-jump-to-heading-in-files
              (mapcar 'buffer-file-name
                      (-filter (lambda (b)
                                 (-when-let (f (buffer-file-name b))
                                   (f-ext? f "org")))
                               (buffer-list)))
              fontify))



           ) ;; Fin de progn

         )  ;; Fin de use-package org
     #+END_SRC

     #+RESULTS:



**** Exportadores

     #+BEGIN_SRC emacs-lisp
       (use-package ox-twbs :config (require 'ox-twbs))
       (use-package ox-gfm :config (require 'ox-gfm))
       (use-package ox-tufte :config (require 'ox-tufte))
       (use-package ox-textile :config (require 'ox-textile))
       (use-package ox-rst :config (require 'ox-rst))
       (use-package ox-asciidoc :config (require 'ox-asciidoc))
       (use-package ox-epub :config (require 'ox-epub))
       (use-package ox-reveal :config (require 'ox-reveal))
     #+END_SRC

     #+RESULTS:
     : t

**** Componentes de =org-babel=

     *NOTA* Para [[https://github.com/corpix/ob-blockdiag.el][ob-blockdiag]] es necesario ejecutar lo siguiente:

     #+BEGIN_EXAMPLE shell
     pip install bloackdiag seqdiag actdiag nwdiag
     #+END_EXAMPLE

     El formato se puede consultar en la página de [[http://blockdiag.com/en/][blockdiag]].

     *NOTA* PAra [[https://github.com/krisajenkins/ob-browser][ob-browser]]  es necesario tener =phantomjs=:

     #+BEGIN_EXAMPLE shell
     sudo apt-get phantomjs
     #+END_EXAMPLE


     #+BEGIN_SRC emacs-lisp
       (use-package ob-http
         :config
         (require 'ob-http)
         )

       (use-package ob-ipython
         :config
         (require 'ob-ipython)
         )

       (use-package ob-mongo
         :config
         (require 'ob-mongo)
         )

       (use-package ob-redis
         :config
         (require 'ob-redis) )

       (use-package ob-cypher
         :config
         (require 'ob-cypher)
         )

       (use-package ob-sql-mode
         :config
         (require 'ob-sql-mode)
         )

       (use-package ob-prolog
         :config
         (require 'ob-prolog))


       (use-package ob-blockdiag
         :config
         (require 'ob-blockdiag))

       (use-package ob-browser
         :config
         (require 'ob-browser))

     #+END_SRC

     #+RESULTS:
     : t

**** Mejoras a =ob-ipython=

     Todo el código que sigue, está tomado de [[https://github.com/jkitchin/scimax][scimax]] (copiado sin verguenza)

     #+BEGIN_SRC emacs-lisp

       (defcustom scimax-ipython-command "jupyter"
         "Command to launch the jupyter kernel."
         :group 'ob-ipython)


       (defcustom ob-ipython-buffer-unique-kernel t
         "If non-nil use a unique kernel for each buffer."
         :group 'ob-ipython)


       (defcustom org-babel-ipython-debug nil
         "If non-nil, log messages."
         :group 'ob-ipython)


       (defcustom ob-ipython-number-on-exception t
         "If non-nil add line numbers to src-blocks when there is an exception."
         :group 'ob-ipython)


       (defcustom org-babel-async-ipython t
         "If non-nil run ipython asynchronously."
         :group 'ob-ipython)


       (defcustom org-babel-ipython-completion t
         "If non-nil enable completion in org-mode."
         :group 'ob-ipython)


       (defcustom org-babel-ipython-name-length 4
         "Number of words to use in generating a name."
         :group 'ob-ipython)


       (defcustom org-babel-ipython-name-generator 'generate-human-readable-name
         "Function to generate a name for a src block.
       The default is the human-readable name generator
       `generate-human-readable-name'. The function should generate a
       name that is unique within the document. You might also like
       `org-id-uuid'."
         :group 'ob-ipython)

       ;;; Code:

       (add-to-list 'org-structure-template-alist
                    '("ip" "#+BEGIN_SRC ipython\n?\n#+END_SRC"
                      "<src lang=\"python\">\n?\n</src>"))


       (setq org-babel-default-header-args:ipython
             '((:results . "output replace drawer")
               (:session . "ipython")
               (:exports . "both")
               (:cache .   "no")
               (:noweb . "no")
               (:hlines . "no")
               (:tangle . "no")
               (:eval . "never-export")))


       (defun scimax-install-ipython-lexer ()
         "Install the IPython lexer for Pygments.
       You need this to get syntax highlighting."
         (interactive)
         (unless (= 0
                    (shell-command
                     "python -c \"import pygments.lexers; pygments.lexers.get_lexer_by_name('ipython')\""))
           (shell-command "pip install git+git://github.com/sanguineturtle/pygments-ipython-console")))


       ;;* Logging


       (defun ob-ipython-log (msg &rest args)
         (when org-babel-ipython-debug
           (with-current-buffer (get-buffer-create "*ob-ipython-log*")
             (org-mode)
             (insert (format "ob-ipython: \n%s\n\n"
                             (apply 'format msg args))))))


       ;;* Commands like the jupyter notebook has

       (defun org-babel-insert-block (&optional below)
         "Insert a src block above the current point.
       With prefix arg BELOW, insert it below the current point."
         (interactive "P")
         (cond
          ((and (org-in-src-block-p) below)
           ;; go to end, and insert block
           (let* ((src (org-element-context))
                  (start (org-element-property :begin src))
                  (end (org-element-property :end src))
                  location)
             (goto-char start)
             (setq location (org-babel-where-is-src-block-result nil nil))
             (if (not  location)
                 (goto-char end)
               (goto-char location)
               (goto-char (org-element-property :end (org-element-context))))
             (insert "\n#+BEGIN_SRC ipython

       ,#+END_SRC\n\n")
             (forward-line -3)))

          ((org-in-src-block-p)
           ;; goto begining and insert
           (goto-char (org-element-property :begin (org-element-context)))
           (insert "\n#+BEGIN_SRC ipython

       ,#+END_SRC\n\n")
           (forward-line -3))

          (t
           (beginning-of-line)
           (insert "\n#+BEGIN_SRC ipython

       ,#+END_SRC\n")
           (forward-line -2))))


       (defun org-babel-split-src-block (&optional below)
         "Split the current src block.
       With a prefix BELOW move point to lower block."
         (interactive "P")
         (let* ((el (org-element-context))
                (language (org-element-property :language el))
                (parameters (org-element-property :parameters el)))

           (beginning-of-line)
           (insert (format "#+END_SRC

       ,#+BEGIN_SRC %s %s\n" language parameters))
           (beginning-of-line)
           (when (not below)
             (org-babel-previous-src-block))))

       (define-key org-mode-map (kbd "H--") #'org-babel-split-src-block)


       ;;* Enhancements to ob-ipython

       ;; overwrites the ob-python function to get jupyter instead of hard-coded
       ;; ipython.
       (defun ob-ipython--kernel-repl-cmd (name)
         (list scimax-ipython-command "console" "--existing" (format "emacs-%s.json" name)))


       ;; This allows unicode chars to be sent to the kernel
       ;; https://github.com/jkitchin/scimax/issues/67
       (defun ob-ipython--execute-request (code name)
         (let ((url-request-data (encode-coding-string code 'utf-8))
               (url-request-method "POST"))
           (with-current-buffer (url-retrieve-synchronously
                                 (format "http://%s:%d/execute/%s"
                                         ob-ipython-driver-hostname
                                         ob-ipython-driver-port
                                         name))
             (if (>= (url-http-parse-response) 400)
                 (ob-ipython--dump-error (buffer-string))
               (goto-char url-http-end-of-headers)
               (let ((json-array-type 'list))
                 (json-read))))))


       (defun ob-ipython-inline-image (b64-string)
         "Write the B64-STRING to a file.
       Returns an org-link to the file."
         (let* ((f (md5 b64-string))
                (d "ipython-inline-images")
                (tfile (concat d "/ob-ipython-" f ".png"))
                (link (format "[[file:%s]]" tfile)))
           (unless (file-directory-p d)
             (make-directory d))
           (ob-ipython--write-base64-string tfile b64-string)
           link))


       (defun ob-ipython--format-result (result result-type)
         "Format a RESULT from an ipython cell.
       Return RESULT-TYPE if specified. This comes from a header argument :ob-ipython-results"
         (cl-flet ((format-result (type value)
                                  (case type
                                    ('text/plain (concat value "\n"))
                                    ('text/html (format
                                                 "#+BEGIN_EXPORT HTML\n%s\n#+END_EXPORT\n"
                                                 value))
                                    ('text/latex (format
                                                  "#+BEGIN_EXPORT latex\n%s\n#+END_EXPORT\n"
                                                  values))
                                    ('image/png (concat (ob-ipython-inline-image value) "\n"))))
                   (select-result-type (type result)
                                       (if type
                                           (--filter (eq (car it) (intern type)) result)
                                         result)))
           (->> result
                (select-result-type result-type)
                (--map (format-result (car it) (cdr it)))
                (apply #'concat "\n"))))

       ;;* A better synchronous execute function

       ;; modified function to get better error feedback
       (defun ob-ipython--create-traceback-buffer (traceback)
         "Creates a traceback error when an exception occurs.
       Sets up a local key to jump back to the Exception."
         (let* ((src (org-element-context))
                (buf (get-buffer-create "*ob-ipython-traceback*"))
                (curwin (current-window-configuration))
                N)
           (with-current-buffer buf
             (special-mode)
             (let ((inhibit-read-only t))
               (erase-buffer)
               (-each traceback
                 (lambda (line) (insert (format "%s\n" line))))
               (ansi-color-apply-on-region (point-min) (point-max)))
             (goto-char (point-min))
             (re-search-forward "-+> \\([0-9]+\\)")
             (setq N (string-to-number (match-string 1)))
             (use-local-map (copy-keymap special-mode-map))
             (setq header-line-format "Press j to jump to src block. q to bury this buffer.")
             (local-set-key "j" `(lambda ()
                                   (interactive)
                                   (if (not org-babel-async-ipython)
                                       (goto-char ,(org-element-property :begin src))
                                     ;; on an async cell
                                     (let ((cell *org-babel-async-ipython-running-cell*))
                                       (message "%s" cell)
                                       (org-babel-async-ipython-clear-queue)
                                       (pop-to-buffer
                                        ,(car *org-babel-async-ipython-running-cell*))
                                       (ob-ipython-log "In buffer %s looking for %s"
                                                       (current-buffer)
                                                       ,(cdr *org-babel-async-ipython-running-cell*))
                                       (org-babel-goto-named-src-block
                                        ,(cdr *org-babel-async-ipython-running-cell*))))
                                   (while (not (looking-at "#\\+BEGIN"))
                                     (forward-line))
                                   (forward-line ,N)
                                   (when ob-ipython-number-on-exception
                                     (number-line-src-block))))
             (local-set-key "q" `(lambda ()
                                   (interactive)
                                   (bury-buffer)
                                   (set-window-configuration ,curwin)
                                   (if (not org-babel-async-ipython)
                                       (goto-char ,(org-element-property :begin src))
                                     ;; on an async cell
                                     (let ((cell *org-babel-async-ipython-running-cell*))
                                       (message "%s" cell)
                                       (org-babel-async-ipython-clear-queue)
                                       (switch-to-buffer
                                        ,(car *org-babel-async-ipython-running-cell*))
                                       (org-babel-goto-named-src-block
                                        ,(cdr *org-babel-async-ipython-running-cell*))))
                                   (while (not (looking-at "#\\+BEGIN"))
                                     (forward-line))
                                   (forward-line ,N)
                                   (when ob-ipython-number-on-exception
                                     (number-line-src-block)))))
           ;; This makes the traceback the current buffer
           (ob-ipython-log "Popping to %s" buf)
           (pop-to-buffer buf)))


       (defun org-babel-execute:ipython (body params)
         "Execute a block of IPython code with Babel.
       This function is called by `org-babel-execute-src-block'."
         (let* ((file (cdr (assoc :file params)))
                (session (cdr (assoc :session params)))
                (async (cdr (assoc :async params)))
                (result-type (cdr (assoc :result-type params)))
                results)
           (org-babel-ipython-initiate-session session params)

           ;; Check the current results for inline images and delete the files.
           (let ((location (org-babel-where-is-src-block-result))
                 current-results)
             (when location
               (save-excursion
                 (goto-char location)
                 (when (looking-at (concat org-babel-result-regexp ".*$"))
                   (setq results (buffer-substring-no-properties
                                  location
                                  (save-excursion
                                    (forward-line 1) (org-babel-result-end)))))))
             (with-temp-buffer
               (insert (or results ""))
               (goto-char (point-min))
               (while (re-search-forward
                       "\\[\\[file:\\(ipython-inline-images/ob-ipython-.*?\\)\\]\\]" nil t)
                 (let ((f (match-string 1)))
                   (when (file-exists-p f)
                     (delete-file f))))))

           (-when-let (ret (ob-ipython--eval
                            (ob-ipython--execute-request
                             (org-babel-expand-body:generic
                              (encode-coding-string body 'utf-8)
                              params (org-babel-variable-assignments:python params))
                             (ob-ipython--normalize-session session))))
             (let ((result (cdr (assoc :result ret)))
                   (output (cdr (assoc :output ret))))
               (if (eq result-type 'output)
                   (concat
                    output
                    (ob-ipython--format-result
                     result
                     (cdr (assoc :ob-ipython-results params))))
                 ;; The result here is a value. We should still get inline images though.
                 (ob-ipython--create-stdout-buffer output)
                 (ob-ipython--format-result
                  result (cdr (assoc :ob-ipython-results params))))))))


       (defun org-babel-execute-to-point ()
         "Execute all the blocks up to and including the one point is on."
         (interactive)
         (let ((p (point)))
           (save-excursion
             (goto-char (point-min))
             (while (and (org-babel-next-src-block) (< (point) p))
               (org-babel-execute-src-block)))))

       ;;** fixing ob-ipython-inspect
       (defun ob-ipython--inspect-request (code &optional pos detail)
         (let ((url-request-data (json-encode `((code . ,code)
                                                (pos . ,(or pos (length code)))
                                                (detail . ,(or detail 0)))))
               (url-request-method "POST"))
           (with-current-buffer (url-retrieve-synchronously
                                 (format "http://%s:%d/inspect/%s"
                                         ob-ipython-driver-hostname
                                         ob-ipython-driver-port
                                         (org-babel-get-session)))
             (if (>= (url-http-parse-response) 400)
                 (ob-ipython--dump-error (buffer-string))
               (goto-char url-http-end-of-headers)
               (let ((json-array-type 'list))
                 (json-read))))))

       ;; I edited this to get the position relative to the beginning of the block
       (defun ob-ipython--inspect (buffer pos)
         "Get the request result for an inspect of POS in BUFFER."
         (let* ((code (with-current-buffer buffer
                        (buffer-substring-no-properties (point-min) (point-max))))
                (resp (ob-ipython--inspect-request code pos 0))
                (status (ob-ipython--extract-status resp)))
           (if (string= "ok" status)
               (ob-ipython--extract-result resp)
             (error (ob-ipython--extract-error resp)))))


       ;; I added the narrow to block. It seems to work ok in the special edit window, and it also seems to work ok if we just narrow the block temporarily.
       (defun ob-ipython-inspect (buffer pos)
         "Ask a kernel for documentation on the thing at POS in BUFFER."
         (interactive (list (current-buffer) (point)))
         (save-restriction
           ;; Note you may be in a special edit buffer in which case it is not
           ;; necessary to narrow.
           (when (org-in-src-block-p) (org-narrow-to-block))
           (-if-let (result (->> (ob-ipython--inspect buffer
                                                      (- pos (point-min)))
                                 (assoc 'text/plain) cdr))
               (ob-ipython--create-inspect-buffer result)
             (message "No documentation was found."))))

       (define-key org-mode-map (kbd "M-.") #'ob-ipython-inspect)

       ;;* Eldoc integration

       ;; I had in mind to integrate this into eldoc, but it for now a standalone
       ;; function to get a minibuffer message.
       ;; Note you need my fork of ob-ipython for this to work.

       (defun ob-ipython-signature-function (buffer pos)
         "Show a signature of the function at point in the minibuffer."
         (interactive (list (current-buffer) (point)))
         (save-restriction
           ;; Note you may be in a special edit buffer in which case it is not
           ;; necessary to narrow.
           (when (org-in-src-block-p) (org-narrow-to-block))
           (-if-let (result (->> (ob-ipython--inspect buffer
                                                      (- pos (point-min)))
                                 (assoc 'text/plain)
                                 cdr))
               (progn
                 (when (stringp result)
                   (setq result (ansi-color-apply result)))
                 (cond
                  ((s-starts-with? "Signature:" result)
                   (message (car (split-string result "\n"))))
                  ((s-starts-with? "Docstring:" result)
                   (message (s-join "\n" (-slice (split-string result "\n") 0 2))))
                  (t
                   (message (car (split-string result "\n"))))))
             (message "Nothing found"))))

       (define-key org-mode-map (kbd "C-1") #'ob-ipython-signature-function)


       ;;* Completion

       ;; This allows you to get completion from the ipython kernel.
       (defun ob-ipython--complete-request (code &optional pos)
         (let ((url-request-data (json-encode `((code . ,code)
                                                (cursor_pos . ,(or pos (length code))))))
               (url-request-method "POST"))
           (with-current-buffer (url-retrieve-synchronously
                                 (format "http://%s:%d/complete/%s"
                                         ob-ipython-driver-hostname
                                         ob-ipython-driver-port
                                         (org-babel-get-session)))
             (if (>= (url-http-parse-response) 400)
                 (ob-ipython--dump-error (buffer-string))
               (goto-char url-http-end-of-headers)
               (let ((json-array-type 'list))
                 (json-read))))))


       (defun ob-ipython-complete ()
         "Get completion candidates for the thing at point."
         (save-restriction
           (when (org-in-src-block-p) (org-narrow-to-block))
           (-if-let (result (->> (ob-ipython--complete-request
                                  (buffer-substring-no-properties (point-min) (point-max))
                                  (- (point) (point-min)))
                                 car
                                 (assoc 'content)))
               (list
                (cdr (assoc 'matches result))
                (cdr (assoc 'cursor_start result))
                (cdr (assoc 'cursor_end result))))))


       (defun ob-ipython-complete-ivy ()
         "Use ivy to complete the thing at point."
         (interactive)
         (let* ((result (ob-ipython-complete))
                (candidates (first result))
                (origin (save-restriction
                          (org-narrow-to-block)
                          (point-min)))
                (beg (+ origin (second result)))
                (end (+ origin (third result))))
           (ivy-read "Complete: " candidates
                     :action (lambda (candidate)
                               (with-ivy-window
                                 (setf (buffer-substring beg end) candidate)
                                 (forward-char (length candidate)))))))


       (define-key org-mode-map (kbd "s-.") #'ob-ipython-complete-ivy)


       ;; This is a company backend to get completion while typing in org-mode.
       (defun ob-ipython-company-backend (command &optional arg &rest ignored)
         (interactive (list 'interactive))
         (if (org-in-src-block-p)
             (pcase command
               (`interactive
                (company-begin-backend 'ob-ipython-company-backend))
               (`prefix (save-excursion
                          (let ((p (point)))
                            (re-search-backward " \\|[[({]\\|^")
                            (s-trim (buffer-substring-no-properties p (point))))))
               (`candidates (first (ob-ipython-complete)))
               ;; sorted => t if the list is already sorted
               (`sorted t)
               ;; duplicates => t if there could be duplicates
               (`duplicates nil)
               (`require-match 'never))
           nil))


       ;;* Asynchronous ipython


       (defvar *org-babel-async-ipython-running-cell* nil
         "A cons cell (buffer . name) of the current cell.")


       (defvar *org-babel-async-ipython-queue* '()
         "Queue of cons cells (buffer . name) for cells to run.")


       ;; adapted from https://github.com/zacharyvoase/humanhash/blob/master/humanhash.py
       (defvar org-babel-src-block-words
         '("ack" "alabama" "alanine" "alaska" "alpha" "angel" "apart" "april"
           "arizona" "arkansas" "artist" "asparagus" "aspen" "august" "autumn"
           "avocado" "bacon" "bakerloo" "batman" "beer" "berlin" "beryllium"
           "black" "blossom" "blue" "bluebird" "bravo" "bulldog" "burger"
           "butter" "california" "carbon" "cardinal" "carolina" "carpet" "cat"
           "ceiling" "charlie" "chicken" "coffee" "cola" "cold" "colorado"
           "comet" "connecticut" "crazy" "cup" "dakota" "december" "delaware"
           "delta" "diet" "don" "double" "early" "earth" "east" "echo"
           "edward" "eight" "eighteen" "eleven" "emma" "enemy" "equal"
           "failed" "fanta" "fifteen" "fillet" "finch" "fish" "five" "fix"
           "floor" "florida" "football" "four" "fourteen" "foxtrot" "freddie"
           "friend" "fruit" "gee" "georgia" "glucose" "golf" "green" "grey"
           "hamper" "happy" "harry" "hawaii" "helium" "high" "hot" "hotel"
           "hydrogen" "idaho" "illinois" "india" "indigo" "ink" "iowa"
           "island" "item" "jersey" "jig" "johnny" "juliet" "july" "jupiter"
           "kansas" "kentucky" "kilo" "king" "kitten" "lactose" "lake" "lamp"
           "lemon" "leopard" "lima" "lion" "lithium" "london" "louisiana"
           "low" "magazine" "magnesium" "maine" "mango" "march" "mars"
           "maryland" "massachusetts" "may" "mexico" "michigan" "mike"
           "minnesota" "mirror" "mississippi" "missouri" "mobile" "mockingbird"
           "monkey" "montana" "moon" "mountain" "muppet" "music" "nebraska"
           "neptune" "network" "nevada" "nine" "nineteen" "nitrogen" "north"
           "november" "nuts" "october" "ohio" "oklahoma" "one" "orange"
           "oranges" "oregon" "oscar" "oven" "oxygen" "papa" "paris" "pasta"
           "pennsylvania" "pip" "pizza" "pluto" "potato" "princess" "purple"
           "quebec" "queen" "quiet" "red" "river" "robert" "robin" "romeo"
           "rugby" "sad" "salami" "saturn" "september" "seven" "seventeen"
           "shade" "sierra" "single" "sink" "six" "sixteen" "skylark" "snake"
           "social" "sodium" "solar" "south" "spaghetti" "speaker" "spring"
           "stairway" "steak" "stream" "summer" "sweet" "table" "tango" "ten"
           "tennessee" "tennis" "texas" "thirteen" "three" "timing" "triple"
           "twelve" "twenty" "two" "uncle" "under" "uniform" "uranus" "utah"
           "vegan" "venus" "vermont" "victor" "video" "violet" "virginia"
           "washington" "west" "whiskey" "white" "william" "winner" "winter"
           "wisconsin" "wolfram" "wyoming" "xray" "yankee" "yellow" "zebra"
           "zulu")
         "List of words to make readable names from.")


       (defun generate-human-readable-name ()
         "Generate a human readable name for a src block.
       The name should be unique to the buffer."
         (random t)
         (let ((N (length org-babel-src-block-words))
               (current-names (org-element-map (org-element-parse-buffer)
                                  'src-block (lambda (el)
                                               (org-element-property
                                                :name el))))
               result)
           (catch 'name
             (while t
               (setq result (s-join
                             "-"
                             (loop for i from 0 below org-babel-ipython-name-length collect
                                   (elt org-babel-src-block-words (random N)))))
               (unless (member result current-names)
                 (throw 'name result))))))


       (defun org-babel-get-name-create ()
         "Get the name of a src block or add a name."
         (if-let (name (fifth (org-babel-get-src-block-info)))
             name
           (save-excursion
             (let ((el (org-element-context))
                   (id (funcall org-babel-ipython-name-generator)))
               (goto-char (org-element-property :begin el))
               (insert (format "#+NAME: %s\n" id))
               id))))


       (defun org-babel-get-session ()
         "Return current session.
       I wrote this because params returns none instead of nil. But in
       that case the process that ipython uses appears to be default."
         (let ((session (cdr (assoc :session (third (org-babel-get-src-block-info))))))
           (if (and session (stringp session) (not (string= "none" session)))
               session
             "default")))

       ;;** async links

       (org-link-set-parameters
        "async-queued"
        :follow (lambda (path)
                  (let* ((f (split-string path " " t))
                         (name (first f)))
                    (setq *org-babel-async-ipython-queue*
                          (remove (rassoc name *org-babel-async-ipython-queue*)
                                  ,*org-babel-async-ipython-queue*)))
                  (save-excursion
                    (org-babel-previous-src-block)
                    (org-babel-remove-result)))
        :face '(:foreground "red")
        :help-echo "Queued")


       (org-link-set-parameters
        "async-running"
        :follow (lambda (path)
                  (ob-ipython-kill-kernel
                   (cdr
                    (assoc
                     (org-babel-get-session)
                     (ob-ipython--get-kernel-processes))))
                  (save-excursion
                    (org-babel-previous-src-block)
                    (org-babel-remove-result))
                  ;; clear the blocks in the queue.
                  (loop for (buffer . name) in *org-babel-async-ipython-queue*
                        do
                        (save-window-excursion
                          (with-current-buffer buffer
                            (org-babel-goto-named-src-block name)
                            (org-babel-remove-result))))
                  (setq *org-babel-async-ipython-queue* nil
                        ,*org-babel-async-ipython-running-cell* nil))
        :face '(:foreground "green4")
        :help-echo "Running")

       ;;** src block text properties

       (defun org-babel-src-block-get-property (property)
         "Return the PROPERTY associated with the src block."
         (save-excursion
           (goto-char (org-element-property :begin (org-element-context)))
           (ob-ipython-log "Text properties: %S" (text-properties-at (point)))
           (get-text-property (point) property)))


       (defun org-babel-src-block-put-property (property value)
         "Add a text property to the src-block"
         (save-excursion
           (goto-char (org-element-property :begin (org-element-context)))
           (put-text-property (line-beginning-position) (line-end-position) property value)))


       ;;** async queue functions

       (defun org-babel-async-ipython-clear-queue ()
         "Clear the queue and all pending results."
         (interactive)
         (loop for (buffer . name) in *org-babel-async-ipython-queue*
               do
               (save-window-excursion
                 (with-current-buffer buffer
                   (ob-ipython-log "Clearing %s in %s" name buffer)
                   (org-babel-goto-named-src-block name)
                   (org-babel-remove-result))))
         (setq *org-babel-async-ipython-running-cell* nil
               ,*org-babel-async-ipython-queue* '()))


       (defun org-babel-async-ipython-process-queue ()
         "Run the next job in the queue."
         (if-let ((not-running (not *org-babel-async-ipython-running-cell*))
                  (queue *org-babel-async-ipython-queue*)
                  ;; It seems we cannot pop queue, which is a local copy.
                  (cell (pop *org-babel-async-ipython-queue*))
                  (buffer (car cell))
                  (name (cdr cell)))
             (save-window-excursion
               (with-current-buffer buffer
                 (org-babel-goto-named-src-block name)
                 (setq *org-babel-async-ipython-running-cell* cell)
                 (ob-ipython-log "Setting up %S to run." cell)
                 (let* ((running-link (format "[[async-running: %s %s]]"
                                              (org-babel-src-block-get-property 'org-babel-ipython-name)
                                              (org-babel-src-block-get-property 'org-babel-ipython-result-type)))
                        (params (third (org-babel-get-src-block-info)))
                        (session (org-babel-get-session))
                        (body (org-babel-expand-body:generic
                               (s-join
                                "\n"
                                (append
                                 (org-babel-variable-assignments:python
                                  (third (org-babel-get-src-block-info)))
                                 (list
                                  (encode-coding-string
                                   (org-remove-indentation
                                    (org-element-property :value (org-element-context))) 'utf-8))))
                               params)))
                   (ob-ipython--execute-request-asynchronously
                    body session)

                   (org-babel-remove-result)
                   (org-babel-insert-result
                    running-link
                    (cdr (assoc :result-params (third (org-babel-get-src-block-info)))))
                   (ob-ipython--normalize-session
                    (cdr (assoc :session (third (org-babel-get-src-block-info)))))
                   running-link)))
           (ob-ipython-log "Cannot process a queue.
           Running: %s
           Queue: %s"
                           ,*org-babel-async-ipython-running-cell*
                           ,*org-babel-async-ipython-queue*)
           nil))


       ;;** async execute functions

       (defun ob-ipython--execute-request-asynchronously (code name)
         "This function makes an asynchronous request.
       CODE is a string containing the code to execute.
       NAME is the name of the kernel, usually \"default\".
       A callback function replaces the results."
         (let ((url-request-data (encode-coding-string code 'utf-8))
               (url-request-method "POST"))
           (ob-ipython-log "Running %S\non kernel %s" code name)
           (url-retrieve
            (format "http://%s:%d/execute/%s"
                    ob-ipython-driver-hostname
                    ob-ipython-driver-port
                    name)
            ;; the callback function
            'ob-ipython--async-callback)))


       (defun ob-ipython--async-callback (status &rest args)
         "Callback function for `ob-ipython--execute-request-asynchronously'.
       It replaces the output in the results."
         (ob-ipython-log "Entering callback for %s" *org-babel-async-ipython-running-cell*)
         (let* ((ret (ob-ipython--eval (if (>= (url-http-parse-response) 400)
                                           (ob-ipython--dump-error (buffer-string))
                                         (goto-char url-http-end-of-headers)
                                         (let* ((json-array-type 'list)
                                                (json (json-read)))
                                           ;; This means there was an exception.
                                           (when (string= "error"
                                                          (cdr
                                                           (assoc 'msg_type (elt json 0))))
                                             (with-current-buffer
                                                 (car *org-babel-async-ipython-running-cell*)
                                               (org-babel-goto-named-src-block
                                                (cdr *org-babel-async-ipython-running-cell*))
                                               (org-babel-remove-result)))
                                           json))))
                (result (cdr (assoc :result ret)))
                (output (cdr (assoc :output ret)))
                params
                (current-cell *org-babel-async-ipython-running-cell*)
                (name (cdr current-cell))
                (result-type))
           (with-current-buffer (car current-cell)
             (save-excursion
               (org-babel-goto-named-src-block name)
               (setq result-type (org-babel-src-block-get-property 'org-babel-ipython-result-type))
               (org-babel-src-block-put-property 'org-babel-ipython-executed  t)
               (ob-ipython-log "Got a result-type of %s\n return from the kernel:  %S" result-type ret)
               (setq params (third (org-babel-get-src-block-info)))
               (org-babel-remove-result)
               (cond
                ((string= "output" result-type)
                 (let ((res (concat
                             output
                             (ob-ipython--format-result
                              result (cdr (assoc :ob-ipython-results params))))))
                   (when (not (string= "" (s-trim res)))
                     (org-babel-insert-result
                      (s-trim res)
                      (cdr (assoc :result-params (third (org-babel-get-src-block-info))))))))
                ((string= "value" result-type)
                 (org-babel-insert-result
                  (cdr (assoc 'text/plain result))
                  (cdr (assoc :result-params (third (org-babel-get-src-block-info)))))))
               (org-redisplay-inline-images)))
           (setq *org-babel-async-ipython-running-cell* nil)
           (let ((traceback (get-buffer "*ob-ipython-traceback*")))
             (when traceback (kill-buffer traceback)))
           ;; see if there is another thing in the queue.
           (org-babel-async-ipython-process-queue)))


       (defun org-babel-execute-async:ipython ()
         "Execute the block at point asynchronously."
         (interactive)
         (when (and (org-in-src-block-p)
                    (string= "ipython" (first (org-babel-get-src-block-info))))
           (let* ((name (org-babel-get-name-create))
                  (params (third (org-babel-get-src-block-info)))
                  (session (cdr (assoc :session params)))
                  (results (cdr (assoc :results params)))
                  (result-type (cdr (assoc :result-type params)))
                  (queue-link (format "[[async-queued: %s %s]]"
                                      (org-babel-get-name-create) result-type)))
             (org-babel-ipython-initiate-session session params)

             ;; Check the current results for inline images and delete the files.
             (let ((location (org-babel-where-is-src-block-result))
                   current-results)
               (when location
                 (save-excursion
                   (goto-char location)
                   (when (looking-at (concat org-babel-result-regexp ".*$"))
                     (setq current-results (buffer-substring-no-properties
                                            location
                                            (save-excursion
                                              (forward-line 1) (org-babel-result-end)))))))
               (with-temp-buffer
                 (insert (or current-results ""))
                 (goto-char (point-min))
                 (while (re-search-forward
                         "\\[\\[file:\\(ipython-inline-images/ob-ipython-.*?\\)\\]\\]" nil t)
                   (let ((f (match-string 1)))
                     (when (file-exists-p f)
                       (delete-file f))))))

             ;; Now we run the async. First remove the old results and insert a link.
             (org-babel-remove-result)

             ;; Set text properties
             (org-babel-src-block-put-property 'org-babel-ipython-result-type result-type)
             (org-babel-src-block-put-property 'org-babel-ipython-name name)
             (org-babel-src-block-put-property 'org-babel-ipython-executed nil)

             (org-babel-insert-result
              queue-link
              (cdr (assoc :result-params (third (org-babel-get-src-block-info)))))

             (add-to-list '*org-babel-async-ipython-queue* (cons (current-buffer) name) t)
             (ob-ipython-log "Added %s to the queue.
           The current running cell is %s.
           The queue contains %S."
                             name
                             ,*org-babel-async-ipython-running-cell*
                             ,*org-babel-async-ipython-queue*)
             ;; It appears that the result of this function is put into the results at this point.
             (or
              (org-babel-async-ipython-process-queue)
              queue-link))))


       (defun scimax-ob-ipython-close ()
         "Cleanup function for when buffer closes."
         ;; first we kill the kernel
         (let ((bf (format "*ob-ipython-kernel-%s*"
                           (org-babel-get-session))))
           (when (get-buffer bf)
             (kill-buffer bf)))
         ;; now if there are no active kernels we clean up the buffers
         (unless (ob-ipython--get-kernel-processes)
           (loop for buf in '("*ob-ipython-client-driver*"
                              "*ob-ipython-traceback*"
                              "*ob-ipython-stdout*"
                              "*ob-ipython-debug*"
                              "*ob-ipython-inspect*"
                              "*Python*")
                 do
                 (when (get-buffer buf)
                   (kill-buffer buf)))))


       (defun scimax-execute-ipython-block ()
         "Execute the block at point.
       If the variable `org-babel-async-ipython' is non-nil, execute it asynchronously.
       This function is used in a C-c C-c hook to make it work like other org src blocks."
         (when (and (org-in-src-block-p)
                    (string= "ipython" (first (org-babel-get-src-block-info))))

           (when ob-ipython-buffer-unique-kernel
             ;; Use buffer local variables for this.
             (make-local-variable 'org-babel-default-header-args:ipython)

             ;; remove the old session info
             (setq org-babel-default-header-args:ipython
                   (remove (assoc :session org-babel-default-header-args:ipython)
                           org-babel-default-header-args:ipython))

             ;; add the new session info
             (let ((session-name (if-let (bf (buffer-file-name))
                                     (md5 (expand-file-name bf))
                                   (org-id-uuid))))
               (add-to-list 'org-babel-default-header-args:ipython
                            (cons :session session-name))
               (ob-ipython-log "running kernel %s" session-name))

             (add-hook 'kill-buffer-hook #'scimax-ob-ipython-close t t))

           (when org-babel-ipython-completion
             (add-to-list 'company-backends 'ob-ipython-company-backend)
             (company-mode +1))

           (save-excursion
             (when (s-contains? "-" (org-babel-get-session))
               (user-error "The :session name (%s) cannot contain a -." (org-babel-get-session)))
             (if org-babel-async-ipython
                 (org-babel-execute-async:ipython)
               (org-babel-execute-src-block)))))

       (add-to-list 'org-ctrl-c-ctrl-c-hook 'scimax-execute-ipython-block)

       ;;** buffer functions

       (defun org-babel-execute-ipython-buffer-to-point-async ()
         "Execute all the ipython blocks in the buffer up to point asynchronously."
         (interactive)
         (let ((session (org-babel-get-session)))
           (org-block-map
            (lambda ()
              (when (and (string= (first (org-babel-get-src-block-info)) "ipython")
                         (string= (org-babel-get-session) session))
                (org-babel-execute-async:ipython)))
            (point-min)
            (point))))


       (defun org-babel-execute-ipython-buffer-async ()
         "Execute all the ipython blocks in the buffer asynchronously."
         (interactive)
         (org-block-map
          (lambda ()
            (when (string= (first (org-babel-get-src-block-info)) "ipython")
              (org-babel-execute-async:ipython)))
          (point-min)
          (point-max)))


       (defun nuke-ipython ()
         "Kill everything."
         (interactive)
         (loop for buf in (buffer-list)
               do
               (when (or (s-starts-with? "*ob-ipython" (buffer-name buf))
                         (s-starts-with? "*org-babel-ipython-debug*" (buffer-name buf))
                         (s-starts-with? "*Python" (buffer-name buf)))
                 (message "killing %s" buf)
                 (kill-buffer buf)))
         (loop for proc in `("localhost"
                             "client-driver"
                             ,(format "kernel-%s" (org-babel-get-session)))
               do
               (when (get-process proc)
                 (ob-ipython-log "Killing proc: %s" proc)
                 (delete-process proc)))
         (org-babel-async-ipython-clear-queue))


       (defun debug-ipython ()
         "Open a buffer showing debug information."
         (interactive)
         (switch-to-buffer-other-window (get-buffer-create "*org-babel-ipython-debug*"))
         (read-only-mode -1)
         (erase-buffer)
         (org-mode)
         (insert "[[elisp:nuke-ipython]]\n\n")
         (insert "[[elisp:org-babel-async-ipython-clear-queue]]\n\n")
         (insert (format "Running: %s\n" *org-babel-async-ipython-running-cell*))
         (insert (format "Queue: %S\n\n" *org-babel-async-ipython-queue*))
         (loop for buf in (buffer-list)
               do
               (when (or (s-starts-with? "*ob-ipython" (buffer-name buf))
                         (s-starts-with? "*Python" (buffer-name buf)))

                 (insert (format "* %s\n\n%s\n"
                                 (buffer-name buf)
                                 (with-current-buffer buf (buffer-string))))))
         (goto-char (point-min)))
     #+END_SRC
**** =org-tree-slide=

     #+BEGIN_SRC emacs-lisp
       (use-package org-tree-slide
         :defer t
         :after (org)
         :bind (("C-<right>" . org-tree-slide-move-next-tree)
                ("C-<left>" . org-tree-slide-move-previous-tree)
                ("C-<up>" . org-tree-slide-content)
                )
         :init
         (setq org-tree-slide-skip-outline-level 4)
         (org-tree-slide-narrowing-control-profile)
         (setq org-tree-slide-skip-done nil)
         (org-tree-slide-presentation-profile)
         )
     #+END_SRC

     #+RESULTS:

**** =org-projectile=

     #+BEGIN_SRC emacs-lisp

       (use-package org-projectile
         :bind (("C-c n p" . org-projectile-project-todo-completing-read)
                ("C-c c" . org-capture))
         :after (org)
         :config
         (progn
           (setq org-projectile-projects-file
                 "~/projects.org")
           (setq org-agenda-files (append org-agenda-files (org-projectile-todo-files)))
           (push (org-projectile-project-todo-entry) org-capture-templates))
         :ensure t)

     #+END_SRC

     #+RESULTS:

**** =org-ref=

     #+BEGIN_SRC emacs-lisp
       (use-package org-ref
         :defer t
         :init
         (setq reftex-default-bibliography '("~/Dropbox/bibliography/references.bib"))

         ;; see org-ref for use of these variables
         (setq org-ref-bibliography-notes "~/Dropbox/bibliography/notes.org"
               org-ref-default-bibliography '("~/Dropbox/bibliography/references.bib")
               org-ref-pdf-directory "~/Dropbox/bibliography/bibtex-pdfs/")
         )
     #+END_SRC

     #+RESULTS:
     : ~/Dropbox/bibliography/bibtex-pdfs/

**** =org-present=

     #+BEGIN_SRC emacs-lisp
       (use-package org-present
         :defer t
         :after (org)
         :init
         (progn

           (add-hook 'org-present-mode-hook
                     (lambda ()
                       (global-linum-mode -1)
                       (org-present-big)
                       (org-display-inline-images)
                       (org-present-hide-cursor)
                       (org-present-read-only)))
           (add-hook 'org-present-mode-quit-hook
                     (lambda ()
                       (global-linum-mode -1)
                       (org-present-small)
                       (org-remove-inline-images)
                       (org-present-show-cursor)
                       (org-present-read-write))))
         )

     #+END_SRC

     #+RESULTS:
     : org-present

**** =org-bullets=

     #+BEGIN_SRC emacs-lisp
       (use-package org-bullets
         :defer t
         :diminish
         :disabled
         :after (org)
         :init
         (setq org-bullets-bullet-list
               '("■" "◆" "▲" "○" "☉" "◎" "◉" "○" "◌" "◎" "●" "◦" "◯" "⚪" "⚫" "⚬" "❍" "￮" "⊙" "⊚" "⊛" "∙" "∘"))
         (add-hook 'org-mode-hook (lambda () (org-bullets-mode 1)))
         )
     #+END_SRC

     #+RESULTS:

**** =org-attach-screenshot=

     #+BEGIN_SRC emacs-lisp
       (use-package org-attach-screenshot
         :diminish
         :after (org)
         :bind
         (("C-c S" . org-attach-screenshot))
         )
     #+END_SRC

**** Calendario visual: =calfw=

     Para configuración y =keybindings= se puede consultar  [[http://jameswilliams.be/blog/2016/01/11/Taming-Your-GCal.html][Taming Google Calendar With Org-Mode]]

     #+BEGIN_SRC emacs-lisp

       (use-package calfw
         :ensure t
         :bind ((""))
         :config
         (require 'calfw-org)
         )

     #+END_SRC

     #+RESULTS:


*** =python=

    #+BEGIN_SRC emacs-lisp
      (use-package pyenv-mode
        :ensure t
        :bind (("C-c v s" . pyenv-mode-set)
               ("C-c v u" . pyenv-mode-unset))
        :config
        (pyenv-mode)
        (add-hook 'projectile-switch-project-hook 'nanounanue/projectile-pyenv-mode-set)
        )
    #+END_SRC

    #+RESULTS:


*** =R=: [[https://ess.r-project.org/][Emacs Speaks Statistics]]


    #+BEGIN_SRC emacs-lisp

      (use-package ess
        :ensure t
        )

    #+END_SRC

    #+RESULTS:


*** =nginx=
    #+BEGIN_SRC emacs-lisp
      (use-package nginx-mode
        :ensure t)
    #+END_SRC

    #+RESULTS:


*** =docker=

    #+BEGIN_SRC emacs-lisp
      (use-package docker :ensure t)
      (use-package docker-tramp :ensure t)
      (use-package dockerfile-mode :ensure t)
    #+END_SRC

    #+RESULTS:

    Para usar =docker-tramp=

    #+BEGIN_EXAMPLE
    C-x C-f /docker:user@container:/path/to/file

    where
      user           is the user that you want to use (optional)
      container      is the id or name of the container
    #+END_EXAMPLE


**** Links relacionados

     [[https://github.com/fniessen/refcard-org-beamer][Refcard para org-beamer]]

     [[https://sam217pa.github.io/2016/09/13/from-helm-to-ivy/][From helm to ivy]]

     [[http://oremacs.com/2015/04/16/ivy-mode/][Descripción de ivy]]


*** markdown

    Keybindings en [[http://jblevins.org/projects/markdown-mode/][Markdown Mode for Emacs]]

    #+BEGIN_SRC emacs-lisp
      (use-package markdown-mode
        :ensure t
        :commands (markdown-mode gfm-mode)
        :mode (("README\\.md\\'" . gfm-mode)
               ("\\.md\\'" . markdown-mode)
               ("\\.markdown\\'" . markdown-mode))
        :init (setq markdown-command "multimarkdown"))
    #+END_SRC


** Blog

   Basado principalmente de [[http://heikkil.github.io/blog/2015/03/28/understanding-org-page/][Understanding org-page]] y del [[https://github.com/kelvinh/org-page/blob/master/doc/quick-guide.org][Quick guide to org-page]]

   #+BEGIN_SRC emacs-lisp
     (use-package org-page
       :ensure t
       :config
       (progn
         (setq op/repository-directory "~/proyectos/nanounanue.github.io")   ;; the repository location
         (setq op/site-domain "http://nanounanue.github.io")         ;; your domain
         ;;; the configuration below you should choose one, not both
         ;;(setq op/personal-disqus-shortname "your_disqus_shortname")    ;; your disqus commenting system
         ;;(setq op/personal-duoshuo-shortname "your_duoshuo_shortname")  ;; your duoshuo commenting system
         ;;(setq op/hashover-comments t)                                   ;; activate hashover self-hosted comment system
         (setq op/personal-avatar "https://avatars2.githubusercontent.com/u/494528?v=3&s=460")
         ;; for commenting; disabled for now
         ;;(setq op/personal-disqus-shortname "your_disqus_shortname")

         ;; analytics set up at ~/.emacs.secrets file
         ;;(setq op/personal-google-analytics-id "UA-NNNNNNNN-N")

         (setq op/personal-github-link "https://github.com/nanounanue")

         (setq op/site-main-title "nanounanue @ home")
         (setq op/site-sub-title "...")

         ;; set up my own theme since a sans option does not exist
         ;;(setq op/theme-root-directory "~/src/org-page/heikkil.github.io/themes")
         ;;(setq op/theme 'sans)  ; mdo is the default

         )
       )

     (use-package blog-admin
       :ensure t
       :defer t
       :commands blog-admin-start
       :init
       (progn
         ;; do your configuration here
         (setq blog-admin-backend-type 'org-page)
         (setq blog-admin-backend-path "~/proyectos/nanounanue.github.io")
         (setq blog-admin-backend-new-post-in-drafts t)
         (setq blog-admin-backend-new-post-with-same-name-dir t)
         (setq blog-admin-backend-org-page-drafts "_drafts") ;; directory to save draft
         ;;(setq blog-admin-backend-org-page-config-file "/path/to/org-page/config.el") ;; if nil init.el is used
         )
       )
   #+END_SRC

   #+RESULTS:
   : _drafts


** Misceláneo

*** =fancy-narrow=

    #+BEGIN_SRC emacs-lisp
      (use-package fancy-narrow
        :ensure t
        :diminish
        :config
        (fancy-narrow-mode)
        )
    #+END_SRC

    #+RESULTS:
    : t

*** =demo-it=

    Paquete para hacer demostraciones. Ver por ejemplo:

    - [[https://www.youtube.com/watch?v=WZVZXp-i7jQ][Demostration of demo-it]]
    - [[https://github.com/howardabrams/demo-it][Repositorio de demo-it]]

      #+BEGIN_SRC emacs-lisp
        (use-package demo-it
          :ensure t
          )
      #+END_SRC

      #+RESULTS:

*** =magit= y =github=

    #+BEGIN_SRC emacs-lisp
      (use-package magithub
        :disabled
        :after magit
        :ensure t
        :config
        (magithub-feature-autoinject t)
        (setq ghub-username "nanounanue")
        (setq ghub-token "856a54bca7d06abb31c0b3197c260da30e7c551d")
        )

      (use-package magit-gitflow
        :ensure t
        :after magit
        :disabled
        :init
        (progn
          (add-hook 'magit-mode-hook 'turn-on-magit-gitflow)  ;; Keybing: C-f en la ventana de magit
          )
        )
    #+END_SRC

    #+RESULTS:

*** =eshell=

    Puedes cambiar el tema de =eshell= tecleando =use-theme= en la consola
    (esto gracias a =eshell-git-prompt-use-theme=)

    #+BEGIN_SRC emacs-lisp
      (use-package eshell-git-prompt
        :config (eshell-git-prompt-use-theme 'robbyrussell))

      (use-package eshell-prompt-extras
        :config
        (progn
          (with-eval-after-load "esh-opt"
            (autoload 'epe-theme-lambda "eshell-prompt-extras")
            (setq eshell-highlight-prompt nil
                  eshell-prompt-function 'epe-theme-lambda))
          ))
    #+END_SRC

    #+RESULTS:
    : t

*** =csv=

    #+BEGIN_SRC emacs-lisp
      (use-package csv-nav
        :ensure t
        )

      (use-package csv-mode
        :ensure t
        :mode "\\.[PpTtCc][Ss][Vv]\\'"

        :config
        (progn
          (setq csv-separators '("," ";" "|" " " "\t"))
          )
        )
    #+END_SRC

    #+RESULTS:



*** =pdf-tools=

[[https://github.com/politza/pdf-tools][Github page]]

Para usr este paquete con  =org-mode=:

#+BEGIN_EXAMPLE
[[pdfview:~/Descargas/01688199.pdf::42][PDF Link]]
#+END_EXAMPLE

    #+BEGIN_SRC emacs-lisp
      (use-package org-pdfview
        :after (org)
        :ensure t
        )

      (use-package  pdf-tools
        :after (org)
        :ensure t
        :config
        (add-to-list 'org-file-apps
                     '("\\.pdf\\'" . (lambda (file link)
                                       (org-pdfview-open link))))
        (add-to-list 'org-file-apps
                     '("\\.pdf::\\([[:digit:]]+\\)\\'" . org-pdfview-open))

        (setq ess-pdf-viewer-pref 'emacsclient)
        )

      (pdf-tools-install)
    #+END_SRC

*** Ugly hacks

    #+BEGIN_SRC emacs-lisp
      (setq python-shell-prompt-detect-failure-warning nil)
    #+END_SRC

    #+RESULTS:

    El siguiente código parte la ventana verticalmente por /default/,
    (no me gusta que se parta horizontalmente)

    *NOTA*: No es necesario si ejecuta bien todo el proceso
    #+BEGIN_SRC emacs-lisp
      ;;(setq split-height-threshold nil)
      ;;(setq split-width-threshold 80)
    #+END_SRC

    #+RESULTS:
    : 80


** Funciones

   #+BEGIN_SRC emacs-lisp
     ;; Para comentarios en archivos de código
     ;; Tomado de https://www.emacswiki.org/emacs/AutoFillMode
     (defun nanounanue/comment-auto-fill ()
       (setq-local comment-auto-fill-only-comments t)
       (auto-fill-mode 1))


     (defun nanounanue/org-skip-subtree-if-priority (priority)
       "Ignora un subtree de la agenda si su PRIORITY es igual a priority.

            PRIORITY puede ser uno de los siguientes caracteres: ?A, ?B, or ?C."
       (let ((subtree-end (save-excursion (org-end-of-subtree t)))
             (pri-value (* 1000 (- org-lowest-priority priority)))
             (pri-current (org-get-priority (thing-at-point 'line t))))
         (if (= pri-value pri-current)
             subtree-end
           nil)))


     (defun nanounanue/projectile-pyenv-mode-set ()
       "Set pyenv version matching project name."
       (let ((project (projectile-project-name)))
         (if (member project (pyenv-mode-versions))
             (pyenv-mode-set project)
           (pyenv-mode-unset))))
   #+END_SRC

   #+RESULTS:
   : nanounanue/projectile-pyenv-mode-set


** Server

   Inicializamos el server

   #+BEGIN_EXAMPLE emacs-lisp
   (server-start)
   #+END_EXAMPLE


* Preload
  :PROPERTIES:
  :header-args:emacs-lisp: :tangle ~/.emacs.d/personal/preload/init.el
  :END:

  #+BEGIN_SRC emacs-lisp
    ;; Cambia la fuente de GNu/Emacs
    (setq default-frame-alist '((font . "Source Code Pro-11")))
  #+END_SRC
